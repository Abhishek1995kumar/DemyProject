<?php

namespace App\Http\Controllers;

use App\User;
use App\Models\ExcelErrorReports;
use App\Models\MasterEmployers;
use App\Models\MasterEmployees;
use App\Models\MasterDefaultPassword;
use App\Models\DumpDefaultPassword;
use Illuminate\Http\Request;
use Maatwebsite\Excel\Facades\Excel;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;
use App\Exports\DefaultPasswordExport;
use App\Imports\DefaultPasswordImport;
use Illuminate\Support\Facades\Storage;
use DB;
use App\Jobs\DefaultPasswordJob;
use App\Exports\DefaultExcelErrorExport;
use Throwable;
class DefaultPasswordController extends Controller {
    public function downloadSampleExcelPassword(Request $request) {
        $rules = [
            // 'defult_password' => 'required',
        ];
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['status' => false, 'errors' => $validator->errors()]);
        } else {
            $excelFormattedRows = env('EXCEL_FORMATTED_ROWS', 100);
            $fileToBeName = 'user_default_password_mode-' . time() . '.xls';
            $filePath = 'User/DefaultPassword/Sample/' . $fileToBeName;
            $diskToStore = env("MEDIA_DISK", 'public');
            $data = [];
            $columnsName = [
                'Employee Code',
                // 'Default Password',
            ];
            $getDefaultPasswordFormat = MasterDefaultPassword::select('name')->get();
            $arrGet = [];
            foreach($getDefaultPasswordFormat as $key => $data){
                $arrGet[$key] = $data->name;
            }
            $data = [
                'default_password_index' => 1,
                'default_password_options' => $arrGet,
            ];
            Excel::store(new DefaultPasswordExport($columnsName, $excelFormattedRows, $data), $filePath, $diskToStore);
            return response()->json(['status' => true, 'data' => Storage::disk($diskToStore)->url($filePath)]);
        }
    }

    public function uploadDefaultPasswordExcel(Request $request){
        $rules = [
            'employer_id'           => 'required',
            'default_password_sheet'=> 'required|file|mimes:xls,xlx,xlsx',
        ];
        $customs = [
            'default_password_sheet.mimes' => 'The : Please select should be Valid Excel File.',
        ];
        $validation = Validator::make($request->all(), $rules, $customs);
        if($validation->fails()){
            return response()->json([
                'status'=> false,
                'errors'=> $validation->errors()
            ]);
        }
        $user = $request->user();
        if($user){
            try{
                $sheetEmpty = 1;
                $excelRecordId = 0;
                ini_set('memory_limit','-1');
                ini_set('max_execution_time',0);
                set_time_limit(0);
                $employer = MasterEmployers::where('id', $request->employer_id)->first();
                $diskSave = env('MEDIA_DISK', 'public');
                $file = $request->file('default_password_sheet');
                $fileName = time().$file->getClientOriginalName();
                $fileUrl = $file->storeAs('User/DefaultPassword/Upload', $fileName, $diskSave);
                try{
                    $errorReport = new ExcelErrorReports();
                    $errorReport->employer_id = $employer->id;
                    $errorReport->document_type_id = ExcelErrorReports::USER_DEFAULT_PASSWORD;
                    $errorReport->original_document_url = Storage::disk($diskSave)->url($fileUrl) ? Storage::disk($diskSave)->url($fileUrl) : NULL;
                    $errorReport->status = ExcelErrorReports::PROCESSING;
                    $errorReport->created_by = $user->id;
                    $errorReport->save();
                    $errorReportId = $errorReport->id;
                    try{
                        $excelData = Excel::toArray(new DefaultPasswordImport($user, $errorReportId), $fileUrl, $diskSave);
                    } catch (\Exception $e){
                        return response()->json([
                            'status'   => false,
                            'error'    => $e->getMessage(),
                            'log_data' => Log::info('test', [$errorReportId]),
                        ]);
                    }
                    if($excelData[0][0]){
                        $sheetEmpty = 0;
                        $deleteExcel = ExcelErrorReports::find($errorReportId);
                        if(!empty($deleteExcel)){
                            $deleteExcel->delete();
                        }
                    }
                    if($excelData[0]){
                        foreach($excelData[0]  as $key => $val){
                            $data = [
                                'employer_id'=> $request->employer_id,
                                'excel_report_id' => $errorReportId,
                                'employee_code'=> $val['employee_code'],
                                'default_password'=> $val['default_password'],
                            ];
                            DumpDefaultPassword::create($data);
                        }
                    }
                    $data = DumpDefaultPassword::with('employeeTable.user')->get();
                    $defaultPassword = NULL;
                    foreach ($data as $key=>$item) {
                        if($item->default_password == "EmployeeName@EmployeeCode"){
                            $name = secure($item->employeeTable->user->name, 'D');
                            $defaultPassword = str_replace(' ','',$name.'@'.$item->employee_code);
                            
                        } elseif($item->default_password == "EmployeeCode@DOJ") {
                            $defaultPassword = str_replace(' ','', $item->employee_code.'@'.$item->employeeTable->doj);
                            
                        } elseif($item->default_password == "EmployeeCode@DOB") {
                            $defaultPassword = str_replace(' ','',$item->employee_code.'@'.$item->employeeTable->dob);

                        } elseif($item->default_password == "DOJ@EmployeeCode"){
                            $name = secure($item->employeeTable->user->name, 'D');
                            $defaultPassword = str_replace(' ','',$item->employeeTable->doj.'@'.$item->employee_code);

                        } elseif($item->default_password == "EmployeeCode@EmployeeName"){
                            $name = secure($item->employeeTable->user->name, 'D');
                            $defaultPassword = str_replace(' ','',$item->employee_code.'@'.$name);

                        } elseif($item->default_password == "EmployeeName@DOB"){
                            $name = secure($item->employeeTable->user->name, 'D');
                            $defaultPassword = str_replace(' ','',$name . '@'. $item->employeeTable->dob);

                        } elseif($item->default_password == "EmployeeName@DOJ"){
                            $name = secure($item->employeeTable->user->name, 'D');
                            $defaultPassword = str_replace(' ','',$name . '@'.$item->employeeTable->doj);

                        } elseif($item->default_password == "EmployeeCode@DomainName"){
                            $val = explode("@",$item->employeeTable->user->email);
                            $defaultPassword = str_replace(' ','',$item->employee_code.'@'.$val[1]);
                        }
                        if($defaultPassword){
                            $user = User::where('id',$item->employeeTable->user_id)->first();
                            $user->default_password = $defaultPassword;
                            $user->password = Hash::make($defaultPassword);
                            $user->update();
                        }
                    }
                    if($sheetEmpty == 1){
                        return response()->json([
                            'status' =>false,
                            'message'=>'Sheet may be empty so please fill the all fields and upload again !!',
                        ]);
                    }else{
                        // $passwordReset = new DefaultPasswordJob($request->employer_id,$errorReportId);
                        // $passwordReset->onQueue('endrosement')->dispatch($request->employer_id,$errorReportId);
                        // return response()->json([
                        //     'status'=> true,
                        //     'message'=> 'File uploaded successfully'
                        // ]);
                    }
                }catch(Throwable $e){
                    Log::error($e);
                }
            }catch(Throwable $e){
                Log::error($e);
            }
        }else{
            return response()->json([
                'status'=> false,
                'message'=> "User Not Found !!"
            ]);
        }
    }

    public function singleDefaultPassword(Request $request) {
        try{
            $user = User::where('email', $request->email)->first();
            $default = MasterDefaultPassword::where("status",1)->get();
            return $default;
            // for single request than run this
            if($user->master_user_types_id == 5){
                $employee_details       = MasterEmployees::with('user')->where('user_id', $user->id)->first();
                $userName               = secure($user->name, 'D');
                $userName               = str_replace(' ', '', $userName);
                $user_email             = $user->email;
                $domain_name            = env('APP_NAME','Employee-Benefits');
                $employee_doj           = $employee_details->doj;
                $employee_dob           = $employee_details->dob;
                $employee_code          = $employee_details->code;
                if($default[0]->name == $request->name) {
                    $defaultPassword = $userName.'@'.$employee_code;
                    $password = Hash::make($defaultPassword);
                    Log::info("password1",[$password]);
                } elseif($default[1]->name == $request->name) {
                    $defaultPassword = $employee_code.'@'.$employee_doj;
                    $password = Hash::make($defaultPassword);
                    Log::info("password2",[$password]);
                } elseif($default[2]->name == $request->name) {
                    $defaultPassword = $employee_code.'@'.$employee_dob;
                    $password = Hash::make($defaultPassword);
                    Log::info("password3",[$password]);
                } elseif($default[3]->name == $request->name) {
                    $defaultPassword = $userName.'@'.$employee_code;
                    $password = Hash::make($defaultPassword);
                    Log::info("password4",[$password]);
                } elseif($default[4]->name == $request->name) {
                    $defaultPassword = $employee_code.'@'.$userName;
                    $password = Hash::make($defaultPassword);
                    Log::info("password5",[$password]);
                } elseif($default[5]->name == $request->name) {
                    $defaultPassword = $userName.'@'.$employee_dob;
                    $password = Hash::make($defaultPassword);
                    Log::info("password6",[$password]);
                } elseif($default[6]->name == $request->name) {
                    $defaultPassword = $userName.'@'.$employee_doj;
                    $password = Hash::make($defaultPassword);
                    Log::info("password7",[$password]);
                } elseif($default[7]->name == $request->name){
                    $defaultPassword = $employee_doj.'@'.$employee_code;
                    $password = Hash::make($defaultPassword);
                    Log::info("password8",[$password]);
                } elseif($default[8]->name == $request->name){
                    $defaultPassword = $employee_code.'@'.$domain_name;
                    $password = Hash::make($defaultPassword);
                    Log::info("password9",[$password]);
                } else{
                    return response()->json([
                        'status'=> false,
                        'message'=> 'Default Password demy is not found !!'
                    ]);
                }
                $user->default_password = $defaultPassword;
                $user->password = $password;
                $user->update();
            }else{
                return response()->json([
                    'status'=> false,
                    'message'=> 'Master User Type id is not found !!'
                ]);
            }
            return response()->json([
                "status"=> true,
                "data"=> $user,
            ],200);
        }catch(\Exception $e){
            return response()->json([
                "status"=> false,
                "error"=> $e->getMessage(),
            ],422);
        }
    }
}



