<?php

namespace App\Jobs\Endrosement;

use App\User;
use Relation;
use UserType;
use Exception;
use Throwable;
use DataDumpStatus;
use CampaignEmailer;
use App\Models\CronLog;
use App\Facades\SendSms;
use App\Facades\SendEmail;
use App\Models\MasterCity;
use App\Models\MasterState;
use Illuminate\Support\Str;
use App\Models\MasterGrades;
use App\Models\MasterPolicy;
use App\Models\Notification;
use App\Facades\SendWhatsapp;
use App\Mail\EndorsementMail;
use App\Models\MasterPremium;
use App\Models\PinCodeMaster;
use Illuminate\Bus\Batchable;
use Illuminate\Bus\Queueable;
use App\Jobs\LaunchEmailerJob;
use App\Models\MasterEmployee;
use App\Models\RelationMaster;
use Illuminate\Support\Carbon;
use App\Facades\FlexCalculator;
use App\Jobs\EmailDashboardJob;
use App\Jobs\EndrosementSmsJob;
use App\Models\DataDumpUploads;
use App\Models\EmployeeMembers;
use App\Models\MasterEmployers;
use App\Models\MasterUserTypes;
use App\Models\PolicyFlexPlans;
use App\Facades\RaterCalculator;
use App\Jobs\EnsrosementMailJob;
use App\Models\EmployeeCoverage;
use App\Models\PolicyAgeDetails;
use App\Facades\EnrollmentWindow;
use App\Models\BrokerUserMapping;
use App\Models\DesignationMaster;
use App\Models\ExcelErrorReports;
use App\Models\MasterPolicyRates;
use Illuminate\Support\Facades\DB;
use App\Models\EmployerUserMapping;
use App\Models\EndrosementDataDump;
use App\Models\MasterSystemTrigger;
use App\Models\PolicySubTypeMaster;
use Illuminate\Support\Facades\Log;
use App\Models\SuminsuredTypeMaster;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use Maatwebsite\Excel\Facades\Excel;
use App\Jobs\EndrosementWhatssappJob;
use App\Models\MasterPolicyRaterType;
use App\Jobs\TPA\GetEnrollmentDataJob;
use App\Models\EmployeeCoverageDetail;
use App\Models\EmployeePolicyRelation;
use App\Models\EmployerChildCompanies;
use App\Models\SystemTriggerTemplates;
use Illuminate\Queue\SerializesModels;
use App\Models\EndrosementRequestFiles;
use App\Models\SuminsuredSubtypeMaster;
use Illuminate\Support\Facades\Storage;
use App\Models\CustomBulkUploadTemplate;
use App\Models\DefaultEndrosementFormat;
use App\Models\PolicyPayrollInstallment;
use Illuminate\Queue\InteractsWithQueue;
use Google\Service\Logging\Resource\Logs;
use App\Models\PolicySystemTriggerMapping;
use App\Jobs\TPA\GetClaimDetailsByPolicyNo;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use App\Jobs\Endrosement\EndrosementMailJob;
use Illuminate\Database\Eloquent\Collection;
use App\Models\EmployeeMemberDeathCertificate;
use Illuminate\Contracts\Queue\ShouldBeUnique;
use App\Models\CustomBulkTemplateFieldMappings;
use App\Http\Controllers\CustomFormatController;
use App\Models\PolicyCustomUploadTemplateMapping;
use App\Models\DefaultEndrosementFormatFeildsMapping;
use App\Models\EmployerCampaignEmailerTriggerMapping;
use App\Jobs\TPA\Optimize\OptimizeGetEnrollmentDataJob;
use App\Exports\Endrosement\MemberEndrosementAddMemberErrorExport;
use App\Services\Endorsement\Validation\EndorsementAdditionValidation;
use Portal;
use App\Models\DumpDefaultPassword;
use App\Models\EmployerDefaultPasswordConfigurator;

class OptimizedMemberEndorsementJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels, Batchable;

    protected $policyId, $excelReportId, $typeId, $user, $isInception, $memberChunk, $isSmallJob, $isSelfChunk, $offset, $batchSize, $cronLogId, $cronLog, $partialProcess, $isComputed;

    /**
     * Create a new job instance.
     *
     * @return void
     */
    public function __construct($policyId, $excelReportId, $typeId, $user, $isInception = 0, $isSmallJob = false, $isSelfChunk = false, $offset = 0, $batchSize = 100, $cronLog, $partialProcess = false, $isComputed = false)
    {
        $this->policyId = $policyId;
        $this->excelReportId = $excelReportId;
        $this->typeId = $typeId;
        $this->user = User::find($user);
        $this->isInception = $isInception;
        $this->isSmallJob = $isSmallJob;
        $this->isSelfChunk = $isSelfChunk;
        $this->offset = $offset;
        $this->batchSize = $batchSize;
        $this->cronLog = $cronLog;
        $this->cronLogId = NULL;
        $this->partialProcess = $partialProcess;
        $this->isComputed = $isComputed;


        ini_set('memory_limit', '-1');
        ini_set('max_execution_time', 0);
        set_time_limit(0);
    }

    /**
     * Execute the job.
     *
     * @return void
     */
    public function handle() {
        try {
            ini_set('memory_limit', '-1');
            ini_set('max_execution_time', 0);
            set_time_limit(0);

            $cronLog = NULL;

            $dataDump = [];

            $policyData = MasterPolicy::whereId($this->policyId)->with('ageDetails', 'rates')->first();

            //if Data is Already computed then no need to validate again
            if (!$this->isComputed) {
                if ($this->isSmallJob) {
                    $dataDump = EndrosementDataDump::where('excel_report_id', $this->excelReportId)
                        ->when($this->partialProcess, fn ($q) => $q->where('dont_process', 0))
                        ->orderBy('id')
                        ->get();
                } else {
                    if ($this->isSelfChunk) {
                        $dataDump = EndrosementDataDump::where('excel_report_id', $this->excelReportId)
                            ->where('relation_id', 1)
                            ->when($this->partialProcess, fn ($q) => $q->where('dont_process', 0))
                            ->orderBy('id')
                            ->offset($this->offset)
                            ->limit($this->batchSize)
                            ->get();
                    } else {
                        $dataDump = EndrosementDataDump::where('excel_report_id', $this->excelReportId)
                            ->where('relation_id', '!=', 1)
                            ->when($this->partialProcess, fn ($q) => $q->where('dont_process', 0))
                            ->orderBy('id')
                            ->offset($this->offset)
                            ->limit($this->batchSize)
                            ->get();
                    }
                }


                $dataDumpToProcess = $dataDump->where('is_processed', 0);

                $dataDumpToValidate = $dataDump->where('is_validated', 0);

                if (Portal::check(Portal::EMPLOYEE_BENEFIT)) {
                    $validation = new EndorsementAdditionValidation($dataDumpToProcess, $policyData, $this->isInception, $this->isSmallJob);
                }

                foreach ($dataDumpToValidate as $key => $chunkedMembersData) {
                    if (Portal::check(Portal::EMPLOYEE_BENEFIT)) {
                        $validation->validate($chunkedMembersData);
                    } else {
                        $this->validateData($dataDumpToProcess, $policyData, $chunkedMembersData);
                    }
                }
            }

            $mEmployer = MasterEmployers::select('id', 'default_password_enabled', 'prefix', 'password_type_id', 'password_type_format', 'postfix')->where('id', $policyData?->employer_id)->first();
            // dd($mEmployer);
            $employerConfig = EmployerDefaultPasswordConfigurator::where('employer_id', $policyData?->employer_id)->first();

            $policyDetails = MasterPolicy::with('ageDetails', 'premium', 'sumInsuredSubType', 'rates', 'opdSumInsuredSubType', 'opdPremium')->whereId($this->policyId)->first();

            if ($this->isSmallJob) {
                $validatedData = EndrosementDataDump::where('excel_report_id', $this->excelReportId)
                    ->when($this->partialProcess, fn ($q) => $q->where('dont_process', 0))
                    ->orderBy('id')
                    ->get();
            } else {
                if ($this->isSelfChunk) {
                    $validatedData = EndrosementDataDump::where('excel_report_id', $this->excelReportId)
                        ->where('relation_id', 1)
                        ->when($this->partialProcess, fn ($q) => $q->where('dont_process', 0))
                        ->orderBy('id')
                        ->offset($this->offset)
                        ->limit($this->batchSize)
                        ->get();
                } else {
                    $validatedData = EndrosementDataDump::where('excel_report_id', $this->excelReportId)
                        ->where('relation_id', '!=', 1)
                        ->when($this->partialProcess, fn ($q) => $q->where('dont_process', 0))
                        ->orderBy('id')
                        ->offset($this->offset)
                        ->limit($this->batchSize)
                        ->get();
                }
            }
            $validatedData = $validatedData?->where('is_validated', 1)->where('has_errors', 0);
            if ($validatedData->isNotEmpty()) {
                foreach ($validatedData as $key => $chunkedMembersData) {
                    try {
                        // DB::transaction(function () use ($chunkedMembersData, $policyData, &$policyDetails, $mEmployer) {
                            // $passwordData = DumpDefaultPassword::where("employee_code", $chunkedMembersData['employee_code'])->get();
                            // foreach($passwordData as $key=>$passData){
                            //     $codeDefault = $passData['employee_code'];
                            //     $passDefault = $passData['password_name'];
                            // }
                            
                            // if($codeDefault == $chunkedMembersData['employee_code']){
                            //     $chunkedMembersData['default_password'] = $passDefault;
                            // }

                            $designationId = NULL;
                            $gradeId = NULL;
                            $dataToCreateUser = [];
                            $dataToCreateEmployee = [];
                            $dataToCreateEmployeePolicyRelationMapping = [];
                            $dataToCreateEmployeePolicyMember = [];
                            $password = NULL;
                            $defaultPassword = NULL;
                            $userHasToBeCreated = 0;
                            $grade = NULL;
                            $designation = NULL;
                            $state = NULL;
                            $employeeNoOfTimeSuminsured = NULL;
                            
                            $action = 1; //Add

                            $userTypeIsUpdated = 0;

                            $relationshipWithEmployee = $chunkedMembersData->relationship_with_employee;

                            //Getting Policy Details.

                            // ce additions and old new, setting on top

                            $memberAddress = $chunkedMembersData?->insured_member_address ?? null;
                            $memberMobile = $chunkedMembersData?->insured_member_mobile_number ?? null;
                            $memberCity = $chunkedMembersData?->insured_member_city ?? null;
                            $memberState = $chunkedMembersData?->insured_member_state ?? null;
                            $memberPincode = $chunkedMembersData?->insured_member_pin_code ?? null;

                            if ($chunkedMembersData?->relation_id == RelationMaster::SELF) {
                                if (!$memberMobile) {
                                    $memberMobile = $chunkedMembersData?->employee_mobile_number ?? NULL;
                                }
                                if (!$memberAddress) {
                                    $memberAddress = $chunkedMembersData->employee_address;
                                }
                                if (!$memberPincode) {
                                    $memberPincode = $chunkedMembersData->employee_pin_code;
                                }
                            }

                            $getPolicyData = getPolicyData($policyDetails);
                            $whenPolicyIsOpd = $getPolicyData['when_policy_is_opd'];
                            $whenPolicyIsIpd = $getPolicyData['when_policy_is_ipd'];

                            $ipdSuminsuredType = $getPolicyData['ipd_suminsured_type'];
                            $ipdSuminsuredSubType = $getPolicyData['ipd_suminsured_sub_type'];
                            $opdSuminsuredType = $getPolicyData['opd_suminsured_type'];
                            $opdSuminsuredSubType = $getPolicyData['opd_suminsured_sub_type'];

                            $ipdPremiumType = $getPolicyData['ipd_premium_type'];
                            $opdPremiumType = $getPolicyData['opd_premium_type'];

                            //Getting current data relation.
                            $currentRelation = RelationMaster::where('name', $relationshipWithEmployee)->first();
                            $relationId = optional($currentRelation)->id;

                            //Getting excel error report column for some req. data
                            $excelErrorReport = ExcelErrorReports::whereId($chunkedMembersData->excel_report_id)->first();

                            $createdBy = $excelErrorReport->created_by;
                            $ip = $chunkedMembersData->ip_address;

                            //To check employee exist
                            $employeeId = NULL;

                            $employerId = $policyDetails->employer_id;

                            $employerChildIds = [];
                            if (isset($chunkedMembersData->employer_name)) {
                                $employerChildIds = EmployerChildCompanies::where('employer_id', $employerId)->pluck('child_employer_id')->toArray();
                                if ($employerChildIds) {
                                    array_push($employerChildIds, $employerId);
                                    $employeeExist = MasterEmployee::with('user', 'grade', 'designation', 'state')->where('code', $chunkedMembersData->employee_code)->whereIn('employer_id', $employerChildIds)->first();
                                }
                            } else {
                                $employeeExist = MasterEmployee::with('user', 'grade', 'designation', 'state')->where('code', $chunkedMembersData->employee_code)->where('employer_id', $policyDetails->employer_id)->first();
                            }
                                
                            if ($employeeExist) {
                                $employeeId = $employeeExist->id;
                                $needToUpdate = 0;
                                if (isset($chunkedMembersData->employee_annual_salary)) {
                                    $employeeExist->salary = $chunkedMembersData->employee_annual_salary;
                                    $needToUpdate = 1;
                                }
                                if (isset($chunkedMembersData->employee_variables_in_salary)) {
                                    $employeeExist->pay_scale = $chunkedMembersData->employee_variables_in_salary;
                                    $needToUpdate = 1;
                                }
                                if (isset($chunkedMembersData->employee_annual_salary_2)) {
                                    $employeeExist->salary_1 = $chunkedMembersData->employee_annual_salary_2;
                                    $needToUpdate = 1;
                                }
                                if (isset($chunkedMembersData->employee_variables_in_salary_2)) {
                                    $employeeExist->pay_scale_1 = $chunkedMembersData->employee_variables_in_salary_2;
                                    $needToUpdate = 1;
                                }
                                if (isset($chunkedMembersData->employee_annual_salary_3)) {
                                    $employeeExist->salary_2 = $chunkedMembersData->employee_annual_salary_3;
                                    $needToUpdate = 1;
                                }
                                if (isset($chunkedMembersData->employee_variables_in_salary_3)) {
                                    $employeeExist->pay_scale_2 = $chunkedMembersData->employee_variables_in_salary_3;
                                    $needToUpdate = 1;
                                }
                                if (isset($chunkedMembersData->employee_date_of_joining)) {
                                    $employeeExist->doj = Carbon::parse($chunkedMembersData->employee_date_of_joining)->toDate();
                                    $needToUpdate = 1;
                                }
                                if (isset($chunkedMembersData->employee_dob) && $relationId == Relation::SELF) {
                                    $employeeExist->dob = Carbon::parse($chunkedMembersData->employee_dob)->toDate();
                                    $needToUpdate = 1;
                                }
                                // if (isset($chunkedMembersData->default_password)) {
                                //     $employeeExist->default_password = $defaultPassword;
                                //     $needToUpdate = 1;
                                // }

                                if (!is_null($chunkedMembersData->employee_designation)) {
                                    $designation = addDesignation($chunkedMembersData->employee_designation, $createdBy, $ip);
                                    $employeeExist->designation_id = $designation?->id;
                                    $needToUpdate = 1;
                                }


                                if (!is_null($chunkedMembersData->employee_grade)) {
                                    $grade = addGrade($chunkedMembersData->employee_grade, $createdBy, $ip);
                                    $employeeExist->grade_id = $grade?->id;
                                    $needToUpdate = 1;
                                }

                                if (!is_null($chunkedMembersData->employee_state) && $relationId == Relation::SELF) {
                                    $state = MasterState::where('state_name', $chunkedMembersData->employee_state)->first();
                                    $employeeExist->state_id = isset($state) ? $state->id : NULL;
                                    $needToUpdate = 1;
                                }

                                if (!is_null($chunkedMembersData->employee_city) && $relationId == Relation::SELF) {
                                    $city = MasterCity::where('city_name', $chunkedMembersData->employee_city)->first();
                                    $employeeExist->city_id = isset($city) ? $city->id : NULL;
                                    $needToUpdate = 1;
                                }

                                if (!is_null($chunkedMembersData->employee_pin_code) && $relationId == Relation::SELF) {
                                    $pincode = PinCodeMaster::where('pincode', $chunkedMembersData->employee_pin_code)->first();
                                    $employeeExist->pincode = isset($pincode) ? $pincode->pincode : NULL;
                                    $needToUpdate = 1;
                                }
                                if ($needToUpdate) {
                                    $employeeExist->update();
                                }
                            } else {
                                $userId = NULL;
                                $userHasToBeCreated = 0;
                                $userTypeIsUpdated = 0;
                                $employeeId = NULL;
                                // Checking if user exists
                                $userExist = User::where('email', $chunkedMembersData->employee_email)->first();
                                //If existing user then setting user Id.
                                if (!is_null($userExist)) {
                                    $userId = $userExist->id;
                                    $userTypeIsUpdated = 1;
                                }

                                //Upper query is eloquent query so deleted records are not checked so checking if user but deleted user.
                                if (is_null($userExist)) {
                                    $isDeletedUser = User::onlyTrashed()->where('email', $chunkedMembersData->employee_email)->first();                          
                                    // If found deleted user then recovering the deleted user.
                                    $needToCreateEmployee = 0;
                                    if (!is_null($isDeletedUser)) {
                                        $isDeletedUser->status = 1;
                                        $isDeletedUser->leaving_date = NULL;
                                        $isDeletedUser->update();
                                        $isDeletedUser->restore();
                                        $userId = $isDeletedUser->id;
                                        MasterEmployee::where('user_id', $userId)->restore();
                                        $userExist = User::where('email', $chunkedMembersData->employee_email)->first();
                                        $deletedEmployee = MasterEmployee::where('user_id', $userId)->first();
                                        if (!$deletedEmployee) {
                                            $needToCreateEmployee = 1;
                                            $deletedEmployee = new MasterEmployee();
                                            $deletedEmployee->employer_id = $policyDetails->employer_id;
                                            $deletedEmployee->user_id = $userId;
                                            $deletedEmployee->status = 1;
                                            $deletedEmployee->created_by = $excelErrorReport?->created_by;
                                            $deletedEmployee->updated_by = 0;
                                            $deletedEmployee->deleted_by = 0;
                                        } else {
                                            $deletedEmployee->old_created_by = $deletedEmployee?->created_by;
                                            $deletedEmployee->created_by = $excelErrorReport?->created_by;
                                            $deletedEmployee->rejoin_on = now();
                                            $deletedEmployee->old_created_at = $deletedEmployee->created_at;
                                            $deletedEmployee->updated_by = $excelErrorReport?->created_by;
                                            $deletedEmployee->created_at = now();
                                            $deletedEmployee->old_doj = $deletedEmployee?->doj;
                                            $deletedEmployee->deleted_by = 0;
                                        }

                                        $deletedEmployee->code = $chunkedMembersData->employee_code;

                                        if (isset($chunkedMembersData->employee_gender)) {
                                            $deletedEmployee->gender = $chunkedMembersData->employee_gender;
                                        }
                                        if (isset($chunkedMembersData->employee_annual_salary)) {
                                            $deletedEmployee->salary = $chunkedMembersData->employee_annual_salary;
                                        }
                                        if (isset($chunkedMembersData->employee_variables_in_salary)) {
                                            $deletedEmployee->pay_scale = $chunkedMembersData->employee_variables_in_salary;
                                        }
                                        if (isset($chunkedMembersData->employee_annual_salary_2)) {
                                            $deletedEmployee->salary_1 = $chunkedMembersData->employee_annual_salary_2;
                                        }
                                        if (isset($chunkedMembersData->employee_variables_in_salary_2)) {
                                            $deletedEmployee->pay_scale_1 = $chunkedMembersData->employee_variables_in_salary_2;
                                        }
                                        if (isset($chunkedMembersData->employee_annual_salary_3)) {
                                            $deletedEmployee->salary_2 = $chunkedMembersData->employee_annual_salary_3;
                                        }
                                        if (isset($chunkedMembersData->employee_variables_in_salary_3)) {
                                            $deletedEmployee->pay_scale_2 = $chunkedMembersData->employee_variables_in_salary_3;
                                        }
                                        if (isset($chunkedMembersData->employee_date_of_joining)) {
                                            $deletedEmployee->doj = Carbon::parse($chunkedMembersData->employee_date_of_joining)->toDate();
                                        }
                                        if (isset($chunkedMembersData->employee_dob) && $relationId == Relation::SELF) {
                                            $deletedEmployee->dob = Carbon::parse($chunkedMembersData->employee_dob)->toDate();
                                        }

                                        if (!is_null($chunkedMembersData->employee_designation)) {
                                            $designation = addDesignation($chunkedMembersData->employee_designation, $createdBy, $ip);
                                            $deletedEmployee->designation_id = $designation?->id;
                                        }

                                        if (!is_null($chunkedMembersData->employee_grade)) {
                                            $grade = addGrade($chunkedMembersData->employee_grade, $createdBy, $ip);
                                            $deletedEmployee->grade_id = $grade?->id;
                                        }

                                        if (!is_null($chunkedMembersData->employee_state) && $relationId == Relation::SELF) {
                                            $state = MasterState::where('state_name', $chunkedMembersData->employee_state)->first();
                                            $deletedEmployee->state_id = isset($state) ? $state->id : NULL;
                                            $needToUpdate = 1;
                                        }

                                        if (!is_null($chunkedMembersData->employee_city) && $relationId == Relation::SELF) {
                                            $city = MasterCity::where('city_name', $chunkedMembersData->employee_city)->first();
                                            $deletedEmployee->city_id = isset($city) ? $city->id : NULL;
                                        }

                                        if (!is_null($chunkedMembersData->employee_pin_code) && $relationId == Relation::SELF) {
                                            $pincode = PinCodeMaster::where('pincode', $chunkedMembersData->employee_pin_code)->first();
                                            $deletedEmployee->pincode = isset($pincode) ? $pincode->pincode : NULL;
                                        }

                                        $employeeId = $deletedEmployee->id;
                                        $deletedEmployeeEmployerId = $deletedEmployee->employer_id;
                                        if ($policyDetails->employer_id != $deletedEmployeeEmployerId) {
                                            $deletedEmployee->employer_id = $policyDetails->employer_id;
                                        }

                                        if ($needToCreateEmployee) {
                                            $deletedEmployee->save();
                                        } else {
                                            $deletedEmployee->update();
                                        }
                                    }
                                }

                                if (!is_null($chunkedMembersData->employee_designation)) {
                                    $designation = addDesignation($chunkedMembersData->employee_designation, $createdBy, $ip);
                                }

                                if (!is_null($chunkedMembersData->employee_grade)) {
                                    $grade = addGrade($chunkedMembersData->employee_grade, $createdBy, $ip);
                                }

                                // If existing user then checking if type is not employee then changing master user type.
                                if (isset($userId) && $relationId == Relation::SELF) {
                                    $currentUserType = MasterUserTypes::where('id', $userExist->master_user_types_id)->first();
                                    
                                    if ($currentUserType->id < 9 && $currentUserType->id != 5) {
                                        $typeToBeCreated = (string)$currentUserType->id . '5';
                                        $typeToBeCreatedExists = MasterUserTypes::where('name', $typeToBeCreated)->first();
                                        if (!is_null($typeToBeCreatedExists)) {
                                            $userExist->master_user_types_id = $typeToBeCreatedExists->id;
                                            $userExist->update();
                                        } else {
                                            $masterUserType = new MasterUserTypes();
                                            $masterUserType->name = $typeToBeCreated;
                                            $masterUserType->save();

                                            $userExist->master_user_types_id = $masterUserType->id;
                                            $userExist->update();
                                        }
                                        $userTypeIsUpdated = 1;
                                    }
                                    if ($currentUserType->id > 9 && $currentUserType->id != 5) {
                                        $currentUserTypeNameArray = str_split($currentUserType->name);
                                        if (!in_array('5', $currentUserTypeNameArray)) {
                                            $typeToBeCreated = (string)$currentUserType->name . '5';
                                            $typeToBeCreatedExists = MasterUserTypes::where('name', $typeToBeCreated)->first();
                                            if (!is_null($typeToBeCreatedExists)) {
                                                $userExist->master_user_types_id = $typeToBeCreatedExists->id;
                                                $userExist->update();
                                            } else {
                                                $masterUserType = new MasterUserTypes();
                                                $masterUserType->name = $typeToBeCreated;
                                                $masterUserType->save();

                                                $userExist->master_user_types_id = $masterUserType->id;
                                                $userExist->update();
                                            }
                                            $userTypeIsUpdated = 1;
                                        }
                                    }
                                }

                                //If normal & deleted both user not found and current data is of self creating user.
                                if (!isset($userId) && $relationId == Relation::SELF) {
                                    $password = generateSystemPassword();
                                    $name = $chunkedMembersData->employee_first_name;
                                    if (!is_null($chunkedMembersData->employee_last_name)) {
                                        $name = $name . ' ' . $chunkedMembersData->employee_last_name;
                                    }

                                    $encryptedName = secure($name, 'E');

                                    $dataToCreateUser['name'] = $encryptedName;
                                    $dataToCreateUser['api_token'] = Str::random(60);

                                    if (in_array($chunkedMembersData->should_verify_email, ['No', 'NO', 'N', 'n'])) {
                                        $dataToCreateUser['email_verified_at'] = now();
                                        $dataToCreateUser['should_verify_email'] = 0;
                                    }

                                    // Password and Default Password Set
                                    if($mEmployer->id == $employerConfig->employer_id){
                                        $eCode = $chunkedMembersData->employee_code;
                                        $eDob = $chunkedMembersData->employee_dob;
                                        $eDoj = $chunkedMembersData->employee_date_of_joining;
                                        $employeeName = $chunkedMembersData->employee_first_name . $chunkedMembersData->employee_last_name;

                                        if($employerConfig->default_password_format_id == 1){
                                            $defaultPassword = str_replace(' ','',$employeeName.'@'. $eCode);

                                        } elseif($employerConfig->default_password_format_id == 2) {
                                            $defaultPassword = str_replace(' ','', $eCode .'@'.$eDoj);

                                        } elseif($employerConfig->default_password_format_id == 3) {
                                            $defaultPassword = str_replace(' ','', $eCode .'@'.$eDob);

                                        } elseif($employerConfig->default_password_format_id == 4) {
                                            $defaultPassword = str_replace(' ','',$employeeName.'@'. $eCode);

                                        } elseif($employerConfig->default_password_format == 5) {
                                            $defaultPassword = str_replace(' ','', $eCode.'@'.$employeeName);

                                        } elseif($employerConfig->default_password_format == 6) {
                                            $defaultPassword = str_replace(' ','', $employeeName .'@'.$eDob);

                                        } elseif($employerConfig->default_password_format == 7) {
                                            $defaultPassword = str_replace(' ','', $employeeName .'@'.$eDoj);

                                        } elseif($employerConfig->default_password_format == 8) {
                                            $defaultPassword = str_replace(' ','', $eDob.'@'.$eCode);

                                        } elseif($employerConfig->default_password_format == 9) {
                                            $domainName = explode("@",$chunkedMembersData->employee_email);
                                            $defaultPassword = str_replace(' ','', $eCode.'@'.$domainName[1]);

                                        }
                                        $dataToCreateUser['default_password'] = $defaultPassword;
                                        $dataToCreateUser['password'] = Hash::make($defaultPassword);
                                        $dataToCreateUser['master_password'] = 0;

                                    } else {
                                        if ($mEmployer?->default_password_enabled) {
                                            $eCode = $chunkedMembersData->employee_code;
                                            $eDob = $chunkedMembersData->employee_dob;
                                            $eDoj = $chunkedMembersData->employee_date_of_joining;
    
                                            $password = generateEmployerBasedDefaultPassword($mEmployer, $eCode, $eDob, $eDoj);
    
                                            $dataToCreateUser['default_password'] = $password;
                                            $dataToCreateUser['password'] = Hash::make($password);
                                            $dataToCreateUser['master_password'] = 0;
                                        } else {
    
                                            if (isset($chunkedMembersData->default_password)) {
                                                $password = $chunkedMembersData->default_password;
                                                $dataToCreateUser['default_password'] = $password;
                                                $dataToCreateUser['password'] = Hash::make($password);
                                                $dataToCreateUser['master_password'] = 0;
                                            } else {
                                                $dataToCreateUser['password'] = Hash::make($password);
                                            }
                                        }
                                    }


                                    if (!is_null($chunkedMembersData->employee_email)) {
                                        $dataToCreateUser['email'] = $chunkedMembersData->employee_email;
                                    }

                                    if (!is_null($chunkedMembersData->employee_mobile_number)) {
                                        $dataToCreateUser['mobile_no'] = secure($chunkedMembersData->employee_mobile_number, 'E');
                                    }

                                    $dataToCreateUser['master_user_types_id'] = UserType::EMPLOYEE;
                                    $dataToCreateUser['remember_token'] = generateRememberToken();
                                    $dataToCreateUser['ip_address'] = $ip;

                                    $userHasToBeCreated = 1;
                                }
                                
                                //Getting Employer detail.
                                $employerId = $policyDetails->employer_id;

                                if ($chunkedMembersData->employer_name) {
                                    $masterEmployer = MasterEmployers::where('name', secure($chunkedMembersData->employer_name, 'E'))->first();
                                    if ($masterEmployer) {
                                        $employerId = $masterEmployer->id;
                                    }
                                }

                                //Means user did not exist in system so obviously employee won't exist so create employee but above code cross check employee.
                                Log::info("Line 597", [
                                    'userHasToBeCreated' => $userHasToBeCreated,
                                    '$userTypeIsUpdated' => $userTypeIsUpdated,
                                    '$employeeId' => $employeeId,

                                ]);
                                if (($userHasToBeCreated == 1 && is_null($employeeId)) || $userTypeIsUpdated == 1) {
                                    $dataToCreateEmployee = [
                                        'user_id' => $userId,
                                        'employer_id' => $employerId,
                                        'code' => $chunkedMembersData->employee_code,
                                        'salary' => $chunkedMembersData->employee_annual_salary ?? NULL,
                                        'salary_1' => $chunkedMembersData->employee_annual_salary_2 ?? NULL,
                                        'salary_2' => $chunkedMembersData->employee_annual_salary_3 ?? NULL,
                                        'pay_scale' => $chunkedMembersData->employee_variables_in_salary ?? NULL,
                                        'pay_scale_1' => $chunkedMembersData->employee_variables_in_salary_2 ?? NULL,
                                        'pay_scale_2' => $chunkedMembersData->employee_variables_in_salary_3 ?? NULL,
                                        'doj' => Carbon::parse($chunkedMembersData->employee_date_of_joining)->toDate(),
                                        'dob' => !is_null($chunkedMembersData->employee_dob) ? Carbon::parse($chunkedMembersData->employee_dob)->toDate() : NULL,
                                        'gender' => $chunkedMembersData->employee_gender ?? NULL,
                                        'address_line_1' => $chunkedMembersData->employee_address ?? NULL,
                                        'address_line_2' => NULL,
                                        'contact' => $chunkedMembersData->employee_mobile_number ?? NULL,
                                        'status' => 1,
                                        'created_by' => $createdBy,
                                        'updated_by' => 0,
                                        'deleted_by' => 0,
                                    ];

                                    if (!is_null($chunkedMembersData->is_vip_employee)) {
                                        if ($chunkedMembersData->is_vip_employee == 'Yes') {
                                            $dataToCreateEmployee['is_vip_employee'] = 1;
                                        } else {
                                            $dataToCreateEmployee['is_vip_employee'] = 0;
                                        }
                                    }


                                    if (!is_null($chunkedMembersData->employee_designation)) {
                                        $designation = addDesignation($chunkedMembersData->employee_designation, $createdBy, $ip);
                                        $dataToCreateEmployee['designation_id'] = $designation?->id;
                                    }


                                    if (!is_null($chunkedMembersData->employee_grade)) {
                                        $grade = addGrade($chunkedMembersData->employee_grade, $createdBy, $ip);
                                        $dataToCreateEmployee['grade_id'] = $grade?->id;
                                    }

                                    if (!is_null($chunkedMembersData->employee_state)) {
                                        $state = MasterState::where('state_name', $chunkedMembersData->employee_state)->first();
                                        $dataToCreateEmployee['state_id'] = isset($state) ? $state->id : NULL;
                                    }

                                    if (!is_null($chunkedMembersData->employee_city)) {
                                        $city = MasterCity::where('city_name', $chunkedMembersData->employee_city)->first();
                                        $dataToCreateEmployee['city_id'] = isset($city) ? $city->id : NULL;
                                    }

                                    if (!is_null($chunkedMembersData->employee_pin_code)) {
                                        $pincode = PinCodeMaster::where('pincode', $chunkedMembersData->employee_pin_code)->first();
                                        $dataToCreateEmployee['pincode'] = isset($pincode) ? $pincode->pincode : NULL;
                                    }
                                }
                            }
                            $newPolicyFlexPlanId = NULL;
                            $policyFlexPlan = NULL;

                            if (!is_null($chunkedMembersData->flex_plan)) {
                                $policyFlexPlan = PolicyFlexPlans::where('policy_id', $this->policyId)->where('plan_name', $chunkedMembersData->flex_plan)->first();
                                if ($policyFlexPlan) {
                                    $newPolicyFlexPlanId = $policyFlexPlan->id;
                                }
                            }

                            $hasErrorInFacade = 0;
                            $errorMessage = NULL;
                            //in case of insured member
                            if ($relationId != Relation::SELF) {
                                if (!is_null($chunkedMembersData->employee_designation)) {
                                    $designation = DesignationMaster::where('name', $chunkedMembersData->employee_designation)->first();
                                }
                                if (!is_null($chunkedMembersData->employee_grade)) {
                                    $grade = MasterGrades::where('grade', $chunkedMembersData->employee_grade)->first();
                                }
                                if (!is_null($chunkedMembersData->employee_state)) {
                                    $state = MasterState::where('state_name', $chunkedMembersData->employee_state)->first();
                                }
                            }

                            $coverType = NULL;
                            if ($chunkedMembersData->cover_type == 'Individual') {
                                $coverType = 1;
                            } elseif ($chunkedMembersData->cover_type == 'Family Cover') {
                                $coverType = 2;
                            }

                            $memberExistingClaim = 0;
                            if (isset($chunkedMembersData->member_existing_claim)) {
                                if (in_array($chunkedMembersData->member_existing_claim, ['YES', 'Yes', 'Y', 'y', '1'])) {
                                    $memberExistingClaim = 1;
                                }
                            }

                            $effectiveDate = $chunkedMembersData->effective_date;
                            if (!$effectiveDate) {
                                $effectiveDate = EmployeePolicyRelation::where('employee_id', $employeeId)->where('policy_id', $policyDetails->id)->first()?->addition_effective_date;
                            }

                            /** Number of time suminsured */
                            if ($policyDetails->suminsured_subtype_type_id == SuminsuredSubtypeMaster::NUMBER_OF_TIME_SUMINSURED) {
                                $employeeNoOfTimeSuminsured = $chunkedMembersData->employee_no_of_time_suminsured;
                            }

                            $type = 1;
                            // $inceptionStartDate = $chunkedMembersData?->inceptionendorsement_date ? Carbon::parse($chunkedMembersData?->inceptionendorsement_date)->toDateString() : null;
                            $rowData = [
                                'action' => $action,
                                'type' => $type,
                                'relation_id' => $relationId,

                                'ipd_suminsured' => $chunkedMembersData->suminsured,
                                'opd_suminsured' => $chunkedMembersData->opd_suminsured,
                                'employee_id' => $employeeId,
                                'employee_grade_id' => $grade?->id,
                                'employee_designation_id' => $designation?->id,
                                'employee_state_id' => $state?->id,
                                'employee_doj' => $chunkedMembersData->employee_date_of_joining,
                                'employee_dob' => $chunkedMembersData->employee_dob,
                                'insured_member_dob' => isset($chunkedMembersData->insured_member_dob) ? Carbon::parse($chunkedMembersData->insured_member_dob)->toDateString() : NULL,
                                'date_of_marriage' => isset($chunkedMembersData->date_of_marriage) ? Carbon::parse($chunkedMembersData->date_of_marriage)->toDateString() : NULL,

                                'employee_cover_type' => $coverType ?? NULL,

                                'employee_number_of_time_salary' => $chunkedMembersData->employee_number_of_time_salary,
                                'insured_member_number_of_time_salary' => $chunkedMembersData->insured_member_number_of_time_salary,

                                'employee_no_of_time_suminsured' => $employeeNoOfTimeSuminsured,

                                'employee_annual_salary' => $chunkedMembersData->employee_annual_salary,
                                'employee_variables_in_salary' => $chunkedMembersData->employee_variables_in_salary,
                                'employee_annual_salary_2' => $chunkedMembersData->employee_annual_salary_2,
                                'employee_variables_in_salary_2' => $chunkedMembersData->employee_variables_in_salary_2,
                                'employee_annual_salary_3' => $chunkedMembersData->employee_annual_salary_3,
                                'employee_variables_in_salary_3' => $chunkedMembersData->employee_variables_in_salary_3,

                                'ipd_employee_premium' => isset($chunkedMembersData->employee_premium) ? $chunkedMembersData->employee_premium : NULL,
                                'ipd_employer_premium' => isset($chunkedMembersData->employer_premium) ? $chunkedMembersData->employer_premium : NULL,
                                'opd_employee_premium' => isset($chunkedMembersData->opd_employee_premium) ? $chunkedMembersData->opd_employee_premium : NULL,
                                'opd_employer_premium' => isset($chunkedMembersData->opd_employer_premium) ? $chunkedMembersData->opd_employer_premium : NULL,

                                'member_existing_claim' => @$memberExistingClaim,

                                'effective_date' => $effectiveDate ? Carbon::parse($effectiveDate)->toDateString() : NULL,
                                'death_certificate_uploaded' => $chunkedMembersData->certificate_available,

                                'flex_plan_id' => $newPolicyFlexPlanId,
                                // 'start_date'    => $inceptionStartDate,
                            ];

                            try {
                                // Log::info('rowData',[$rowData]);
                                $suminsuredAndPremiumData = RaterCalculator::calculateSuminsuredAndPremium($policyDetails, $rowData, $employeeExist);
                                $hasErrorInFacade = $suminsuredAndPremiumData['has_error'] ?? 0;
                            } catch (Throwable $e) {
                                $jobStatus = ['status' => false, 'message' => 'Oops! Expected Error Occur.', 'log_message' => $e->getMessage(), 'error_trace' => $e->getTrace()];
                                Log::info("791 : Error in facade", $jobStatus);
                                $hasErrorInFacade = 1;
                            }

                            //If any error found in rater
                            if ($hasErrorInFacade || (!$employeeExist && $relationId != Relation::SELF)) {
                                if (!$employeeExist && $relationId != Relation::SELF) {
                                    $errorMessage = 'Employee doest not exists.';
                                } else {
                                    if (isset($suminsuredAndPremiumData)) {
                                        try {
                                            if (gettype($suminsuredAndPremiumData) == 'array') {
                                                $errorMessage = $suminsuredAndPremiumData['error_message'] ?? NULL;
                                                $errorMessage = json_encode($errorMessage);
                                            }
                                        } catch (Throwable $e) {
                                            $errorMessage = 'Failed To Process Data. RCF';
                                        }
                                    } else {
                                        $errorMessage = 'Failed To Process Data. RCF';
                                    }
                                }
                                $errorMessageArray = [$errorMessage];
                                $chunkedMembersData->has_errors = 1;
                                $chunkedMembersData->errors = json_encode(array_values($errorMessageArray));
                                $chunkedMembersData->update();

                            } else {
                                $ipdSuminsuredValue = $suminsuredAndPremiumData['ipd_suminsured'];
                                $opdSuminsuredValue = $suminsuredAndPremiumData['opd_suminsured'];

                                $ipdTotalCoverValue = $suminsuredAndPremiumData['ipd_total_cover'];
                                $opdTotalCoverValue = $suminsuredAndPremiumData['opd_total_cover'];

                                $ipdPremiumValue = $suminsuredAndPremiumData['ipd_premium'];
                                $ipdEmployeePremiumValue = $suminsuredAndPremiumData['ipd_employee_premium'];
                                $ipdEmployerPremiumValue = $suminsuredAndPremiumData['ipd_employer_premium'];

                                $opdPremiumValue = $suminsuredAndPremiumData['opd_premium'];
                                $opdEmployeePremiumValue = $suminsuredAndPremiumData['opd_employee_premium'];
                                $opdEmployerPremiumValue = $suminsuredAndPremiumData['opd_employer_premium'];

                                $employeeCoverStartDate = $suminsuredAndPremiumData['start_date'];
                                $memberExistingClaim = $suminsuredAndPremiumData['member_existing_claim'] ?? 0;

                                $ipdAllParentPremium = $suminsuredAndPremiumData['ipd_all_parent_premium'] ?? 0;
                                $opdAllParentPremium = $suminsuredAndPremiumData['opd_all_parent_premium'] ?? 0;

                                if (($userHasToBeCreated == 1 && !is_null($password))) {
                                    $user = User::create($dataToCreateUser);
                                    $userId = $user->id;
                                    $dataToCreateEmployee['user_id'] = $userId;
                                    $employee = MasterEmployee::create($dataToCreateEmployee);
                                    $employeeId = $employee->id;
                                    $dataToCreateEmployeePolicyRelationMapping['employee_id'] = $employeeId;
                                    $dataToCreateEmployeePolicyMember['emp_id'] = $employeeId;

                                } elseif(($userHasToBeCreated == 1 && !is_null($defaultPassword))) {
                                    $user = User::create($dataToCreateUser);
                                    $userId = $user->id;
                                    $dataToCreateEmployee['user_id'] = $userId;
                                    $employee = MasterEmployee::create($dataToCreateEmployee);
                                    $employeeId = $employee->id;
                                    $dataToCreateEmployeePolicyRelationMapping['employee_id'] = $employeeId;
                                    $dataToCreateEmployeePolicyMember['emp_id'] = $employeeId;
                                }
                                
                                if ($userTypeIsUpdated == 1 && is_null($employeeId)) {
                                    $dataToCreateEmployee['user_id'] = $userId;
                                    $employee = MasterEmployee::create($dataToCreateEmployee);
                                    $employeeId = $employee->id;
                                    $dataToCreateEmployeePolicyRelationMapping['employee_id'] = $employeeId;
                                    $dataToCreateEmployeePolicyMember['emp_id'] = $employeeId;
                                }

                                if (isset($userId)) {
                                    if (!is_null($userId) && !isset($employeeId)) {
                                        $employeeId = MasterEmployee::where('user_id', $userId)->first()?->id;
                                    }
                                }

                                $selfSiSelection = 0;
                                $coverType = NULL;
                                if (in_array($chunkedMembersData->self_si_selection, ['Yes', 'Y', 'yes', 'y'])) {
                                    $selfSiSelection = 1;
                                }



                                if ($chunkedMembersData->cover_type == 'Individual') {
                                    $coverType = 1;
                                } elseif ($chunkedMembersData->cover_type == 'Family Cover') {
                                    $coverType = 2;
                                }

                                $policyPayrollInstallmentId = NULL;
                                if ($relationId == Relation::SELF && isset($chunkedMembersData->installment)) {
                                    $installmentSubArray = explode(" ", $chunkedMembersData->installment);
                                    $policyPayrollInstallmentId = PolicyPayrollInstallment::where('policy_id', $policyData->id)->where('installment', $installmentSubArray[0])->first()?->id;
                                }

                                $masterEmployee = MasterEmployee::where('id', $employeeId)->first();

                                $enrollmentStatusData = EnrollmentWindow::status($policyDetails, $masterEmployee);

                                $isEndtermEmployee  = $enrollmentStatusData['enrollment_endterm_window_is_set'] ?? 0;


                                // Checking employee Policy relation exists if yes then will take up the ID if not will create.
                                $employeePolicyRelationMappingId = NULL;

                                $employeePolicyRelation = EmployeePolicyRelation::where('policy_id', $policyDetails->id)
                                    ->where('employee_id', $employeeId)->first();

                                if ($employeePolicyRelation) {
                                    $employeePolicyRelationMappingId = $employeePolicyRelation->id;
                                } else {
                                    $dataToCreateEmployeePolicyRelationMapping['employee_id'] = $employeeId;
                                    $dataToCreateEmployeePolicyRelationMapping['policy_id'] = $policyDetails->id;
                                    $dataToCreateEmployeePolicyRelationMapping['self_si_selection'] = $selfSiSelection;
                                    $dataToCreateEmployeePolicyRelationMapping['cover_type'] = $coverType;
                                    $dataToCreateEmployeePolicyRelationMapping['policy_payroll_installment_id'] = $policyPayrollInstallmentId ?? NULL;
                                    $dataToCreateEmployeePolicyRelationMapping['is_endterm_employee'] = $isEndtermEmployee ?? 0;
                                    $dataToCreateEmployeePolicyRelationMapping['addition_effective_date'] = $effectiveDate ? Carbon::parse($effectiveDate)->toDate() : NULL;
                                }

                                $ctc = NULL;
                                $location = NULL;
                                $zone = NULL;

                                if (isset($chunkedMembersData->ctc)) {
                                    $ctc = $chunkedMembersData->ctc;
                                }
                                if (isset($chunkedMembersData->location)) {
                                    $location = $chunkedMembersData->location;
                                }
                                if (isset($chunkedMembersData->zone)) {
                                    $zone = $chunkedMembersData->zone;
                                }

                                $insurerEndorsementId = NULL;
                                $insurerEndorsementDate = NULL;
                                $insurerRemovalId = NULL;
                                $insurerRemovalDate = NULL;
                                $insurerCorrectionId = NULL;
                                $insurerCorrectionDate = NULL;
                                $batchId = NUll;
                                if (isset($chunkedMembersData->insurer_endorsement_id)) {
                                    $insurerEndorsementId = $chunkedMembersData->insurer_endorsement_id;
                                }
                                if (isset($chunkedMembersData->insurer_endorsement_date)) {
                                    $insurerEndorsementDate = $chunkedMembersData->insurer_endorsement_date;
                                }
                                if (isset($chunkedMembersData->insurer_removal_id)) {
                                    $insurerRemovalId = $chunkedMembersData->insurer_removal_id;
                                }
                                if (isset($chunkedMembersData->insurer_removal_date)) {
                                    $insurerRemovalDate = $chunkedMembersData->insurer_removal_date;
                                }
                                if (isset($chunkedMembersData->insurer_correction_id)) {
                                    $insurerCorrectionId = $chunkedMembersData->insurer_correction_id;
                                }
                                if (isset($chunkedMembersData->insurer_correction_date)) {
                                    $insurerCorrectionDate = $chunkedMembersData->insurer_correction_date;
                                }

                                if (isset($chunkedMembersData->has_death_certificate)) {
                                    $hasDeathCertificate = $chunkedMembersData->has_death_certificate;
                                }
                                // batchId
                                if (isset($chunkedMembersData->batch_id)) {
                                    $batchId = $chunkedMembersData->batch_id;
                                }

                                // Lol specifics
                                try {
                                    $licenseStart = $licenseExpiry = $typeOflicense = $issuingAuthority = $licenseIssuance = $coverEffectiveDate = $licenseNumber = NULL;

                                    if (isset($chunkedMembersData->license_start_date)) {
                                        $licenseStart = $chunkedMembersData->license_start_date;
                                    }
                                    if (isset($chunkedMembersData->license_expiry_date)) {
                                        $licenseExpiry = $chunkedMembersData->license_expiry_date;
                                    }
                                    if (isset($chunkedMembersData->type_of_license)) {
                                        $typeOflicense = $chunkedMembersData->type_of_license;
                                    }
                                    if (isset($chunkedMembersData->issuing_authority)) {
                                        $issuingAuthority = $chunkedMembersData->issuing_authority;
                                    }
                                    if (isset($chunkedMembersData->license_issuance_date)) {
                                        $licenseIssuance = $chunkedMembersData->license_issuance_date;
                                    }
                                    if (isset($chunkedMembersData->cover_effective_date)) {
                                        $coverEffectiveDate = $chunkedMembersData->cover_effective_date;
                                    }
                                    if (isset($chunkedMembersData?->license_number)) {
                                        $licenseNumber = $chunkedMembersData?->license_number;
                                    }
                                } catch (Throwable $e) {
                                    $chunkedMembersData->has_errors = 1;
                                    array_push($errorMessageArray, 'Loss of license validation error');
                                    $chunkedMembersData->errors = json_encode(array_values($errorMessageArray));
                                    $chunkedMembersData->update();
                                    Log::error($e->getMessage(), [$e->getTraceAsString()]);
                                }

                                /** Initial Suminsured Set suminsured of multiple suminsured in sheet value */
                                $initialSuminsured = NULL;
                                if ($policyDetails->suminsured_subtype_type_id == SuminsuredSubtypeMaster::NUMBER_OF_TIME_SUMINSURED) {
                                    $initialSuminsured = $chunkedMembersData?->suminsured;
                                } else {
                                    $initialSuminsured = $ipdSuminsuredValue;
                                }



                                $dataToCreateEmployeePolicyMember = [
                                    'emp_id'                                 => $employeeId,
                                    'employee_policy_mapping_id'             => $employeePolicyRelationMappingId,
                                    'relation_id'                            => $relationId,
                                    'suminsured'                             => $ipdSuminsuredValue,
                                    'opd_suminsured'                         => $opdSuminsuredValue,
                                    'total_cover'                            => $ipdTotalCoverValue,
                                    'opd_total_cover'                        => $opdTotalCoverValue,
                                    'premium'                                => $ipdPremiumValue,
                                    'employee_premium'                       => $ipdEmployeePremiumValue,
                                    'employer_premium'                       => $ipdEmployerPremiumValue,
                                    'opd_premium'                            => $opdPremiumValue,
                                    'opd_employee_contribution'              => $opdEmployeePremiumValue,
                                    'opd_employer_contribution'              => $opdEmployerPremiumValue,
                                    'new_policy_flex_plan_id'                => $newPolicyFlexPlanId,
                                    'member_existing_claim'                  => $memberExistingClaim,
                                    'intial_suminsured'                      => $initialSuminsured,
                                    'intial_premium'                         => $ipdPremiumValue,
                                    'intial_employee_premium'                => $ipdEmployeePremiumValue,
                                    'intial_employer_premium'                => $ipdEmployerPremiumValue,
                                    'start_date'                             => $employeeCoverStartDate,
                                    'end_date'                               => $policyDetails->end_date,
                                    'created_by'                             => $createdBy,
                                    'is_inception'                           => $this->isInception,
                                    'ipd_all_parent_premium'                 => $ipdAllParentPremium,
                                    'opd_all_parent_premium'                 => $opdAllParentPremium,
                                    'insurer_endorsement_date'               => $insurerEndorsementDate,
                                    'insurer_endorsement_id'                 => $insurerEndorsementId,
                                    'insurer_removal_id'                     => $insurerRemovalId,
                                    'insurer_removal_date'                   => $insurerRemovalDate,
                                    'insurer_correction_id'                  => $insurerCorrectionId,
                                    'insurer_correction_date'                => $insurerCorrectionDate,
                                    'member_mob_no'                          => $memberMobile,
                                    'pincode'                                => $memberPincode,
                                    'address'                                => $memberAddress,
                                    'installment_id'                         => $policyPayrollInstallmentId,
                                    'has_death_certificate'                  => $hasDeathCertificate ?? 0,
                                    'batch_id'                               => $batchId,
                                    'license_start_date'                     => $licenseStart,
                                    'license_expiry_date'                    => $licenseExpiry,
                                    'type_of_license'                        => $typeOflicense,
                                    'issuing_authority'                      => $issuingAuthority,
                                    'license_issuance_date'                  => $licenseIssuance,
                                    'cover_effective_date'                   => $coverEffectiveDate,
                                    'license_number'                         => $licenseNumber,
                                    'ctc'                                    => $ctc,
                                    'location'                               => $location,
                                    'zone'                                   => $zone,
                                ];

                                $otherFieldsArray = [];
                                $otherFieldsArray['other_1'] = $chunkedMembersData->other_1;
                                $otherFieldsArray['other_2'] = $chunkedMembersData->other_2;
                                $otherFieldsArray['other_3'] = $chunkedMembersData->other_3;
                                $otherFieldsArray['other_4'] = $chunkedMembersData->other_4;
                                $otherFieldsArray['other_5'] = $chunkedMembersData->other_5;
                                $dataToCreateEmployeePolicyMember['others'] = json_encode($otherFieldsArray);

                                if ($relationId > Relation::SELF) {
                                    $dataToCreateEmployeePolicyMember['first_name'] = $chunkedMembersData->insured_member_first_name;
                                    $dataToCreateEmployeePolicyMember['last_name'] = $chunkedMembersData->insured_member_last_name ?? NULL;
                                    $dataToCreateEmployeePolicyMember['gender'] = $chunkedMembersData->insured_member_gender ?? NULL;
                                    $dataToCreateEmployeePolicyMember['member_email'] = $chunkedMembersData->insured_member_email ?? NULL;
                                    $dataToCreateEmployeePolicyMember['number_of_time_salary'] = isset($chunkedMembersData->insured_member_number_of_time_salary) ? $chunkedMembersData->insured_member_number_of_time_salary : NULL;
                                    $dataToCreateEmployeePolicyMember['dob'] = isset($chunkedMembersData->insured_member_dob) ? Carbon::parse($chunkedMembersData->insured_member_dob)->toDate() : NULL;
                                    $dataToCreateEmployeePolicyMember['endorsement_date'] = !is_null($chunkedMembersData->inceptionendorsement_date) ? Carbon::parse($chunkedMembersData->inceptionendorsement_date)->toDate() : NULL;

                                    if ($relationId == Relation::SPOUSE) {
                                        $dataToCreateEmployeePolicyMember['marriage_date'] = !is_null($chunkedMembersData->date_of_marriage) ? Carbon::parse($chunkedMembersData->date_of_marriage)->toDate() : NULL;
                                    }
                                } else {
                                    $dataToCreateEmployeePolicyMember['first_name'] = $chunkedMembersData->employee_first_name;
                                    $dataToCreateEmployeePolicyMember['last_name'] = $chunkedMembersData->employee_last_name ?? NULL;
                                    $dataToCreateEmployeePolicyMember['gender'] = $chunkedMembersData->employee_gender ?? NULL;
                                    $dataToCreateEmployeePolicyMember['member_email'] = isset($chunkedMembersData->employee_email) ? $chunkedMembersData->employee_email : NULL;
                                    $dataToCreateEmployeePolicyMember['dob'] = isset($chunkedMembersData->employee_dob) ? Carbon::parse($chunkedMembersData->employee_dob)->toDate() : NULL;
                                    $dataToCreateEmployeePolicyMember['number_of_time_salary'] = isset($chunkedMembersData->employee_number_of_time_salary) ? $chunkedMembersData->employee_number_of_time_salary : NULL;
                                    $dataToCreateEmployeePolicyMember['no_of_time_suminsured'] = isset($chunkedMembersData->employee_number_of_time_suminsured) ? $chunkedMembersData->employee_number_of_time_suminsured : NULL;
                                    $dataToCreateEmployeePolicyMember['endorsement_date'] = !is_null($chunkedMembersData->inceptionendorsement_date) ? Carbon::parse($chunkedMembersData->inceptionendorsement_date)->toDate() : NULL;
                                    $dataToCreateEmployeePolicyMember['marriage_date'] = !is_null($chunkedMembersData->date_of_marriage) ? Carbon::parse($chunkedMembersData->date_of_marriage)->toDate() : NULL;
                                }

                                if (isset($dataToCreateEmployeePolicyRelationMapping['employee_id'])) {
                                    $employeePolicyRelation = EmployeePolicyRelation::create($dataToCreateEmployeePolicyRelationMapping);
                                    $dataToCreateEmployeePolicyMember['employee_policy_mapping_id'] = $employeePolicyRelation->id;
                                }

                                if (isset($newPolicyFlexPlanId) && !is_null($policyFlexPlan)) {
                                    $willEmployerPayIntialPremium = $policyFlexPlan->will_initial_premium_be_paid_by_employer;
                                    if ($willEmployerPayIntialPremium == 1) {
                                        $dataToCreateEmployeePolicyMember['premium'] = $ipdPremiumValue;
                                        $dataToCreateEmployeePolicyMember['employee_premium'] = 0;
                                        $dataToCreateEmployeePolicyMember['employer_premium'] = $ipdPremiumValue;
                                    }
                                }

                                if (!is_null($chunkedMembersData->insured_member_city)) {
                                    $city = MasterCity::where('city_name', $chunkedMembersData->insured_member_city)->first();
                                    $dataToCreateEmployeePolicyMember['city'] = isset($city) ? $city->id : NULL;
                                }

                                if (isset($dataToCreateEmployeePolicyMember['emp_id'])) {
                                    $createdMember = EmployeeMembers::create($dataToCreateEmployeePolicyMember);
                                }

                                /** FLEX ENDROSMENT */
                                $premiumLoadingLogic = env('PREMIUM_LOADING_LOGIC', NULL);


                                if ($premiumLoadingLogic) {
                                    $flexPlanId = $newPolicyFlexPlanId;

                                    $employeeMembers = EmployeeMembers::where('employee_policy_mapping_id', $createdMember?->employee_policy_mapping_id)->get();

                                    if (is_null($flexPlanId)) {
                                        $flexPlanId = $employeeMembers->first()?->new_policy_flex_plan_id;
                                    }

                                    if ($flexPlanId) {

                                        $flexData = [
                                            'employee_id' => $employeeExist?->id,
                                            'policy_id' => $policyDetails?->id,
                                            'suminsured' => $ipdSuminsuredValue,
                                            'cover_start_date' => $employeeCoverStartDate,
                                            'epr_id' => $createdMember?->employee_policy_mapping_id
                                        ];

                                        RaterCalculator::flexPremiumLoading($flexPlanId, $flexData, $employeeMembers);
                                    }
                                }
                                /** END OF FLEX ENDROSEMENT */
                                // Mails to be triggered after this.
                                //update status of row to is processed.
                                $chunkedMembersData->is_processed = 1;
                                $chunkedMembersData->update();
                            }
                        // });
                    } catch (Exception $e) {
                        $errors = [
                            'failed_to_process' => 'Failed to process data',
                        ];
                        $chunkedMembersData->has_errors = 1;
                        $chunkedMembersData->errors = json_encode(array_values($errors));
                        $chunkedMembersData->update();
                        $jobStatus = ['status' => false, 'message' => 'Oops! Expected Error Occur.', 'log_message' => $e->getMessage(), 'error_trace' => $e->getTrace()];
                        Log::info("763 : Failed to do endorsement", $jobStatus);
                    }
                }
            } else {
                Log::info("No data to process.");
            }

            $stillMoreDataToProcess = 0;
            // $checkingDoesMoreDataIsAvaliableCount = EndrosementDataDump::where('excel_report_id', $this->excelReportId)->where('is_validated', 0)
            //     ->where('is_processed', 0)->count();
            $processingDone = false;
            if ($processingDone) {
                // $stillMoreDataToProcess = 1;
                // if ($stillMoreDataToProcess == 1) {
                //     NewMemberEndrosementJob::dispatch($this->policyId, $this->excelReportId, $this->typeId, $this->user, $this->isInception)->delay(2)->onQueue('endrosement');
                // }
            } else {
                if ($this->isSmallJob) {
                    $this->createExcelErrorReport();
                    $policy = MasterPolicy::with('employer', 'policyType', 'policySubType', 'contactDetails')->where('id', $this->policyId)->first();
                    $excelReport = ExcelErrorReports::where('id', $this->excelReportId)->first();

                    $brokerEmail = $brokerSpocName = $employerEmail  = $employerSpocName = NULL;

                    $contact = $policy?->contactDetails->where('type', 1)->first();
                    if ($contact) {
                        $brokerEmail = $contact?->contact_email;
                        $brokerSpocName = $contact?->contact_name;
                    }

                    $contact1 = $policy?->contactDetails->where('type', 0)->first();
                    if ($contact1) {
                        $employerEmail = $contact1?->contact_email;
                        $employerSpocName = $contact1?->contact_name;
                    }
                    $employerName = secure($policy?->employer?->name, 'D');

                    $noOfEmployeesUploaded = $excelReport?->no_of_employees_uploaded;
                    $noOfEmployeesFailedToUpload = $excelReport?->no_of_employees_failed_to_upload;

                    $date = $excelReport ? Carbon::parse($excelReport->created_at)->toDateString() : NULL;
                    $time = $excelReport ? Carbon::parse($excelReport->created_at)->toTimeString() : NULL;

                    $uploadedFile = $excelReport->original_document_url;
                    $errorFile = $excelReport->error_document_url;
                    $endorsementType = "Member Addition";

                    //New Email
                    $newEmail = $policy?->employer?->new_email;

                    if ($newEmail) {
                        $employerLogoUrl = $policy?->employer?->media->isNotEmpty() ? $policy?->employer?->media?->last()->getFullUrl() : null;

                        $memberAdditionTrigger = PolicySystemTriggerMapping::with('masterPolicy')->where('master_system_trigger_id', MasterSystemTrigger::MEMBER_ADDITION)->where('policy_id', $policy->id)->first();

                        if ($memberAdditionTrigger?->to_trigger) {
                            $emailRowData = [
                                'employer_id' => $policy->employer_id,
                                'broker_id' => $policy->broker_id,
                                'policy_id' => $policy->id,

                                'policy_name' => $policy->policy_name,
                                'policy_number' => $policy->policy_number,
                                'policy_start_date' => Carbon::parse($policy->start_date)->format('d-m-Y'),
                                'policy_end_date' => Carbon::parse($policy->end_date)->format('d-m-Y'),
                                'policy_type' => optional($policy->policySubType)->name ?? NULL,
                                'endorsement_type' => $endorsementType,
                                'uploaded_by' => secure($this->user->name, 'D') ?? NULL,
                                'upload_date_time' => Carbon::parse($date)->format('d-m-Y') . ' ' . $time ?? NULL,
                                'date' => $date,
                                'time' => $time,
                                'employer_name' => $employerName,
                                'total_member_uploaded' => $noOfEmployeesUploaded + $noOfEmployeesFailedToUpload,
                                'member_uploaded_successfully' => $noOfEmployeesUploaded ?? 0,
                                'member_upload_failed' => $noOfEmployeesFailedToUpload ?? 0,
                                'member_uploaded_file' => $uploadedFile,
                                'member_uploaded_failed_file' => $errorFile ?? NULL,

                                'broker_data' => newGetBrokerEmailData(),
                                'employer_logo_url' => $employerLogoUrl,
                            ];

                            if ($employerEmail) {

                                $emailRowData['broker_employer_name'] = $employerSpocName;

                                $to = $employerEmail;
                                $cc = NULL;
                                SendEmail::memberAdditionMail($to, $cc, $emailRowData);
                            }

                            if ($brokerEmail) {

                                $emailRowData['broker_employer_name'] = $brokerSpocName;

                                $to = $brokerEmail;
                                $cc = NULL;
                                SendEmail::memberAdditionMail($to, $cc, $emailRowData);
                            }
                        }
                    } else {
                        if ($policy) {
                            $mailData = [
                                'policy_d' => $policy->id,
                                'policy_name' => $policy->policy_name,
                                'policy_number' => $policy->policy_number,
                                'policy_start_date' => Carbon::parse($policy->start_date)->format('d-m-Y'),
                                'policy_end_date' => Carbon::parse($policy->end_date)->format('d-m-Y'),
                                'policy_type' => optional($policy->policySubType)->name ?? NULL,
                                'endorsement_type' => $endorsementType,
                                'employer_id' => $policy->employer_id,
                                'broker_id' => $policy->broker_id,
                                'currentUserName' => secure($this->user->name, 'D') ?? NULL,
                                'broker_employer_name' => $brokerSpocName,
                                'upload_date_time' => Carbon::parse($date)->format('d-m-Y') . ' ' . $time ?? NULL,
                                'date' => $date,
                                'time' => $time,
                                'employer_name' => $employerName,
                                'total_member_uploaded' => $noOfEmployeesUploaded,
                                'member_uploaded_successfully' => $noOfEmployeesUploaded - $noOfEmployeesFailedToUpload ?? 0,
                                'member_upload_failed' => $noOfEmployeesFailedToUpload ?? 0,
                                'uploaded_file' => $uploadedFile,
                                'member_uploaded_file' => $uploadedFile,
                                'member_upload_failed_file' => $errorFile ?? NULL,
                                'member_uploaded_failed_file' => $errorFile ?? NULL,
                                'emailData' => [
                                    'employer_id' => $policy->employer_id,
                                    'broker_id' => $policy->broker_id,
                                    'receiver_user_type' => 'Broker',
                                ],
                                'brokerData' => getBrokerEmailData(),
                            ];

                            $employerData = [
                                'policy_d' => $policy->id,
                                'policy_name' => $policy->policy_name,
                                'policy_number' => $policy->policy_number,
                                'policy_start_date' => Carbon::parse($policy->start_date)->format('d-m-Y'),
                                'policy_end_date' => Carbon::parse($policy->end_date)->format('d-m-Y'),
                                'policy_type' => optional($policy->policySubType)->name ?? NULL,
                                'endorsement_type' => $endorsementType,
                                'employer_id' => $policy->employer_id,
                                'broker_id' => $policy->broker_id,
                                'currentUserName' => secure($this->user->name, 'D') ?? NULL,
                                'broker_name' => secure($this->user->name, 'D') ?? NULL,
                                'broker_employer_name' => $employerSpocName,
                                'upload_date_time' => Carbon::parse($date)->format('d-m-Y') . ' ' . $time ?? NULL,
                                'date' => $date,
                                'time' => $time,
                                'employer_name' => $employerName,
                                'total_member_uploaded' => $noOfEmployeesUploaded,
                                'member_uploaded_successfully' => $noOfEmployeesUploaded - $noOfEmployeesFailedToUpload ?? 0,
                                'member_upload_failed' => $noOfEmployeesFailedToUpload ?? 0,
                                'uploaded_file' => $uploadedFile,
                                'member_uploaded_file' => $uploadedFile,
                                'member_upload_failed_file' => $errorFile ?? NULL,
                                'member_uploaded_failed_file' => $errorFile ?? NULL,
                                'emailData' => [
                                    'employer_id' => $policy->employer_id,
                                    'broker_id' => $policy->broker_id,
                                    'receiver_user_type' => 'Broker',
                                ],
                                'brokerData' => getBrokerEmailData(),
                            ];

                            $templateName = 'MemberAddition';
                            $appName = $appName = env('APP_NAME', 'Employee-Benefits');
                            if ($appName == 'Employee-Benefits') {
                                $memberAdditionTriggerDetails = PolicySystemTriggerMapping::with('masterPolicy')->where('master_system_trigger_id', MasterSystemTrigger::MEMBER_ADDITION)->where('policy_id', $policy->id)->first();
                                if (!is_null($memberAdditionTriggerDetails)) {
                                    if ($memberAdditionTriggerDetails->to_trigger == 1) {

                                        if (!is_null($policy->employer_id) && !is_null($policy->id)) {
                                            $systemTriggerTemplateExists = SystemTriggerTemplates::with('media', 'dynamicValues.masterDynamicValue')->whereHas('templateMappings', function ($query)  use ($policy) {
                                                $query->where('employer_id', $policy->employer_id)->where('policy_id', $policy->id);
                                            })->where('system_trigger_id', MasterSystemTrigger::MEMBER_ADDITION)->where('status', 1)
                                                ->where('broker_id', $policy->broker_id)
                                                ->latest()->first();
                                        }

                                        if ($systemTriggerTemplateExists) {

                                            if (isset($brokerEmail)) {

                                                $mailData['broker_employer_name'] = $brokerSpocName;

                                                $htmlBody = addDynamicValuesToHtml($mailData, $systemTriggerTemplateExists);
                                                $mailData['htmlBody'] = $htmlBody;
                                                $mailData['image'] = optional(optional(optional($systemTriggerTemplateExists)->media)->last())->getFullUrl();
                                                $mailData['checkView'] = 'customView';

                                                Mail::to($brokerEmail)->send(new EndorsementMail($mailData));
                                                createEmailLog($brokerEmail, 'MemberAddition', $mailData, $templateName, $mailData);
                                            }

                                            if (isset($employerEmail)) {

                                                $mailData['broker_employer_name'] = $employerSpocName;

                                                $htmlBody = addDynamicValuesToHtml($mailData, $systemTriggerTemplateExists);
                                                $mailData['htmlBody'] = $htmlBody;
                                                $mailData['image'] = optional(optional(optional($systemTriggerTemplateExists)->media)->last())->getFullUrl();
                                                $mailData['checkView'] = 'customView';

                                                Mail::to($employerEmail)->send(new EndorsementMail($mailData));
                                                createEmailLog($employerEmail, 'MemberAddition', $mailData, $templateName, $mailData);
                                            }
                                        } else {
                                            if (isset($brokerEmail)) {
                                                // $mailData['broker_employer_name'] = $brokerSpocName;
                                                Mail::to($brokerEmail)->send(new EndorsementMail($mailData));
                                                createEmailLog($brokerEmail, 'MemberAddition', $mailData, $templateName, $mailData);
                                            }
                                            if (isset($employerEmail)) {
                                                // $mailData['broker_employer_name'] = $employerSpocName;
                                                Mail::to($employerEmail)->send(new EndorsementMail($employerData));
                                                createEmailLog($employerEmail, 'MemberAddition', $employerData, $templateName, $employerData);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    /** Whatsapp and sms trigger */
                    $memberAdditionWhatsappSMSTrigger = PolicySystemTriggerMapping::with('masterPolicy')
                        ->where('master_system_trigger_id', MasterSystemTrigger::MEMBER_ADDITION)
                        ->where('policy_id', $policy->id)->first();

                    if (!is_null($memberAdditionWhatsappSMSTrigger)) {

                        $policyBrokerContactDetails = $policy?->contactDetails->where('type', 1)->first();

                        $date = $excelReport ? Carbon::parse($excelReport->created_at)->format('d/m/Y') : now()->format('d/m/Y');
                        $time = $excelReport ? Carbon::parse($excelReport->created_at)->format('H:i:s') : now()->format('H:i:s');
                        $uplodedUser = User::where('id', $excelReport->created_by)->first();

                        if (!is_null($policyBrokerContactDetails->contact_number) && !is_null($uplodedUser)) {

                            $data = [
                                'mobile_no' => $policyBrokerContactDetails->contact_number,
                                'employee_name' => $policyBrokerContactDetails->contact_name,
                                'uploaded_by' => secure($uplodedUser?->name, 'D') ?? NULL,
                                'date' => $date,
                                'time' => $time,
                                'broker_id' => $policy->broker_id,
                                'employer_id' => $policy->employer_id,
                                'employee_id' => NULL,
                                'policy_id' => $policy->id,
                                'user_id' => $uplodedUser->id,
                            ];

                            if ($memberAdditionWhatsappSMSTrigger->to_whatsapp_trigger == 1) {
                                SendWhatsapp::memberAddition($data);
                            }

                            if ($memberAdditionWhatsappSMSTrigger->to_sms_trigger == 1) {
                                SendSms::memberAdditionSMS($data);
                            }
                        }
                    }
                }

                if ($this->isSmallJob) {
                    // GetEnrollmentDataJob::dispatch($this->policyId)->onQueue('tpa');
                    OptimizeGetEnrollmentDataJob::dispatch($this->policyId)->onQueue('tpa');
                    Log::info("GetEnrollmentDataJob and GetClaimDetailsByPolicyNo job dispatched");
                }
            }
        } catch (Exception $e) {
            $errors = [
                'failed_to_process' => 'Failed to process data',
            ];
            //            $individualMemberData->has_errors = 1;
            //            $individualMemberData->errors = json_encode(array_values($errors));
            //            $individualMemberData->update();
            $jobStatus = ['status' => false, 'message' => 'Oops! Expected Error Occur.', 'log_message' => $e->getMessage(), 'error_trace' => $e->getTrace()];
            Log::info("798 : Failed to do endorsement", $jobStatus);

            $policy = MasterPolicy::with(['tpaServices'])
                ->where('id', $this->policyId)
                ->first();

            Log::info("GetEnrollmentDataJob dispatched (catch)");
        }
    }


    function validateData($dataDumpToProcess, $policyForValidation, $data)
    {
        try {
            $messages = [
                'employee_code_is_required' => 'Employee code is required.',
                'invalid_employee_code' => 'Employee code format is invalid.',

                'duplicate_employee_code_found_in_sheet' => 'Duplicate Employee Code found in Sheet.',
                'employee_already_exist_in_policy' => 'Employee with given employee code already exist within this policy.',
                'duplicate_employee_email_found_in_sheet' => 'Duplicate Employee Email found.',
                'employee_email_id_exist' => 'Employee Email id already mapped with other organisation.',

                'relationship_required' => 'Relationship with employee is required.',
                'relation_into_policy_not_allowed' => 'Relation not covered into policy.',

                'dob_and_doj_same' => 'Employee DOB & DOJ cannot be same.',

                'employee_email_required' => 'Employee Email is required.',
                'invalid_email_format' => 'Email format is invalid.',

                'employee_does_not_exist' => 'Employee not found.',
                'employee_exist_with_error' => 'Unable to process as employee data has error.',
                'employee_member_already_exists' => 'Member with this relation already exists into the policy.',

                'employee_grade_is_required' => 'Employee Grade is required.',
                'employee_designation_is_required' => 'Employee Designation is required.',
                'employee_annual_salary_required' => 'Employee annual salary is required.',
                'employee_annual_salary_2_required' => 'Employee annual salary 2 is required.',
                'employee_annual_salary_3_required' => 'Employee annual salary 3 is required.',
                // 'employee_variables_in_salary_required' => 'Employee variables in salary is required.',
                'employee_number_of_time_salary_required' => 'Employee Number of time salary field is required.',
                'insured_member_number_of_time_salary_required' => 'Insured member number of time salary field is required.',
                'invalid_employee_number_of_time_salary' => 'Employee number of time salary is not valid.',

                'employee_number_of_time_suminsured_required' => 'Employee Number of time suminsured field is required',
                'invalid_no_of_time_suminsured' => 'Invalid Number Of time suminsured.',

                'invalid_employee_dob' => 'Employee dob format is invalid.',
                'invalid_member_dob' => 'Member dob format is invalid.',
                'invalid_date_of_marriage' => 'Date of marriage format is invalid.',
                'employee_date_of_joining_required' => 'Employee date of joining is required.',
                'invalid_employee_date_of_joining' => 'Employee doj format is invalid.',
                'invalid_inceptionendorsement_date_of_joining' => 'Inception/Endorsement date format is invalid.',

                'parents_limit_reached' => 'Max parent allowed limit reached.',
                'parent_cross_selection_not_allowed' => 'Parent cross selection not allowed into this policy.',

                'duplicate_child' => 'This Child is already exist in this policy.',
                'duplicate_spouse' => 'Spouse is already exist in this policy.',
                'duplicate_partner' => 'Partner is already exist in this policy.',

                'employee_first_name_required' => 'Employee first name is required.',
                'member_first_name_required' => 'Member first name is required.',
                'member_dob_is_required' => 'Member dob is required.',
                'invalid_employee_first_name' => 'Invalid employee first name.',
                'invalid_employee_last_name' => 'Invalid employee last name.',
                'invalid_member_first_name' => 'Invalid member first name.',
                'invalid_member_last_name' => 'Invalid member last name.',

                'min_password_length' => 'The password must be at least 8 characters.',
                'invaild_password_pattern' => 'The password should have at least a lowercase, an uppercase, a number & a symbol.',

                'employee_incorrect_mobile_no_length' => 'Employee mobile number must be 10 digits.',
                'employee_invalid_mobile_no' => 'Invalid employee mobile number.',
                'member_incorrect_mobile_no_length' => 'Insured member mobile number must be 10 digits.',
                'member_invalid_mobile_no' => 'Invalid insured member mobile number.',

                'parent_age_must_be_greater_than_employee_age' => 'Parent age must be greater than employeee age.',
                'parent_in_law_age_must_be_greater_than_employee_age' => 'Parent in law age must be greater than employeee age.',
                'child_age_must_be_less_than_employee_age' => 'Child age must be less than employee age.',
                'age_diffrence_must_be_18' => 'Employee and member age difference must be atleast 18 years.',


                'invalid_employer' => 'Invalid Employer Found',
                'member_limit_reached' => 'Max member allowed in policy limit reached.',

                'suminsured_is_missing' => 'Please enter sum insured amount.',
                'is_valid_ipd_sum_insured' => 'Suminsured does not match with given master policy',
                'opd_suminsured_is_missing' => 'Please enter opd sum insured amount.',
                'is_valid_opd_suminsured' => 'OPD Suminsured does not match with given master policy',
                'premium_is_missing' => 'Please enter premium amount.',
                'opd_premium_is_missing' => 'Please enter opd premium amount.',

                'future_date_message' => 'Invalid DOB Future date not allowed.',
                'future_dom' => 'Invalid DOM Future date not allowed.',
                'age_construct_message' => 'Construct message',
                'cover_not_found_for_age' => 'Cover amount not found for this age.',
                'premium_not_found_for_age' => 'Premium amount not found for this age.',
                'invalid_state' => 'Invalid State found.',

                'spouse_partner_date_of_marriage' => 'Spouse date of marriage is not match with self.',

                'spouse_limit_reached' => 'Number of spouse allowed into the policy limit reached.',
                'partner_limit_reached' => 'Number of partner allowed into the policy limit reached.',
                'children_limit_reached' => 'Number of children allowed into the policy limit reached.',
                'siblings_limit_reached' => 'Number of siblings allowed into the policy limit reached',
                'parents_limit_reached' => 'Number of parents allowed into the policy limit reached',

                'invalid_employee_doj' => 'Employee doj must be less than policy end date',

                'self_or_spouse_is_required' => 'Self or spouse should be added first',

                'cover_type_is_required' => 'Cover type is required',
                'invalid_cover_type' => 'Invalid cover type',

                'dob_is_grater_then_dom' => 'DOB is greater then DOM please enter correct DOM.',
                'dom_is_less_than_18_years' => 'DOB and DOM difference must be atleast 18 years.',
                'dom_should_same_as_employee' => 'DOM should be same as Employee.',

                'age_must_be_18_years' => 'Member age must be at least 18 years.',
                'death_certificate_not_uploaded' => 'Death Certificate is not uploaded for this member',
                'death_certificate_uploaded' => 'Death Certificate is uploaded for this relation',
                'has_death_certificate_to_be_yes' => 'Death Certificate Found, has_death_certificate column should be YES',

                'invalid_installment' => 'Invalid Installment',

                'invalid_effective_date' => 'Effective date format is invalid.',
                'effective_date_should_be_greater_than_policy_start_date' => 'Effective date must be greater than policy start date.',
                'effective_date_should_be_greater_than_doj' => 'Effective date must be greater than doj.',
                'effective_date_should_be_less_than_policy_end_date' => 'Effective date must be less than policy end date.',
                'miss_match_effective_date' => 'Effective doest not match.',

                'invalid_data_received_on_date' => 'Data received on date format is invalid,',

                'ctc' => 'Ctc should be Numeric',
                'location' => 'Special Characters in Location Not Allowed'
            ];

            $hasErrors = 0;

            $errors = [];

            // self validations
            if ($policyForValidation->is_parent_policy != 1 && $policyForValidation->is_dependent_policy != 1 && $data->relation_id != 1) {
                $employeeInPolicyExists = false;
                $selfEpr = false;

                $employerId = $policyForValidation->employer_id;

                $employerChildIds = [];


                if (isset($data->employer_name)) {
                    $employerChildIds = EmployerChildCompanies::where('employer_id', $employerId)->pluck('child_employer_id')->toArray();
                    if ($employerChildIds) {
                        array_push($employerChildIds, $employerId);
                        $selfEmployeeExists = MasterEmployee::with('user', 'grade', 'designation', 'state')->where('code', $data->employee_code)->whereIn('employer_id', $employerChildIds)->first();
                    }
                } else {
                    $selfEmployeeExists = MasterEmployee::where('code', optional($data)->employee_code)->where('employer_id', optional($policyForValidation)->employer_id)->first();
                }

                if ($selfEmployeeExists) {
                    $selfEpr =  EmployeePolicyRelation::where('policy_id', $policyForValidation->id)
                        ->where('employee_id', $selfEmployeeExists->id)
                        ->first();
                }
                if ($selfEpr) {
                    $employeeInPolicyExists = EmployeeMembers::where('employee_policy_mapping_id', $selfEpr->id)
                        ->where('relation_id', RelationMaster::SELF)
                        ->first();
                }
                if ($this->isSmallJob && !$employeeInPolicyExists) {
                    $employeeInPolicyExists = EndrosementDataDump::where('employee_code', $data->employee_code)
                        ->where('type_id', 1)
                        ->where('excel_report_id', $this->excelReportId)
                        ->where('policy_id', $policyForValidation->id)
                        ->where('relation_id', RelationMaster::SELF)
                        ->first();
                }
                if ($this->isSmallJob && !$employeeInPolicyExists) {
                    $employeeInPolicyExists = EndrosementDataDump::where('employee_code', $data->employee_code)
                        ->where('type_id', 1)
                        // ->where('employer_id', $policyForValidation->employer_id)
                        ->where('excel_report_id', $this->excelReportId)
                        ->where('policy_id', $policyForValidation->id)
                        ->where('relation_id', RelationMaster::SELF)
                        ->first();
                }

                if (!$employeeInPolicyExists) {
                    $data->has_errors = 1;
                    $hasErrors = 1;
                    array_push($errors, 'self not found in policy');
                }
            }

            // batchId validations

            if (isset($data->batch_id)) {
                $pattern = "/^\w+$/";
                $match = preg_match($pattern, $data->batch_id);
                if (!$match) {
                    $data->has_errors = 1;
                    $hasErrors = 1;
                    array_push($errors, 'Batch ID can only be alphanumeric');
                }
            }

            // lol specifics
            if ($policyForValidation?->policy_sub_type_id == PolicySubTypeMaster::LOL_BASE || $policyForValidation?->policy_sub_type_id == PolicySubTypeMaster::LOL_TOP_UP) {
                if ($policyForValidation->suminsured_subtype_type_id == SuminsuredSubtypeMaster::LOL_GRADE_OF_EMPLOYEE || $policyForValidation->suminsured_subtype_type_id == SuminsuredSubtypeMaster::LOL_GRADE_WITH_CONSTRUCT) {
                    if (!isset($data->suminsured)) {
                        // $hasErrors = 1;
                        // array_push($errors, "SI is required");
                    }
                    if (isset($data->employee_grade)) {
                        $lolGrade = MasterGrades::where('grade', $data->employee_grade)->first();
                        if ($lolGrade) {
                            if (isset($data->suminsured)) {
                                $withConstruct = false;
                                if ($policyForValidation->suminsured_subtype_type_id == SuminsuredSubtypeMaster::LOL_GRADE_WITH_CONSTRUCT) {
                                    $withConstruct = true;
                                }
                                $lolRates = $policyForValidation?->rates->whereNull('total_premium')
                                    ->where('grade_id', $lolGrade->id)
                                    ->when(!$withConstruct, function ($query) use ($data) {
                                        $query->where('grade_suminsured', $data->suminsured);
                                    })
                                    ->when($withConstruct, function ($query) use ($data) {
                                        $query->where('self_suminsured', $data->suminsured);
                                    });
                                if ($lolRates?->isEmpty()) {
                                    $hasErrors = 1;
                                    array_push($errors, "SI Not Covered In Grade");
                                }
                            }
                        } else {
                            $hasErrors = 1;
                            array_push($errors, "Grade not found");
                        }
                    } else {
                        $hasErrors = 1;
                        array_push($errors, "Grade is required");
                    }
                    if (isset($data->license_start_date) && isset($data->license_expiry_date)) {
                        $licenseStartDate = Carbon::parse($data->license_start_date);
                        $licenseEndDate = Carbon::parse($data->license_expiry_date);
                        if (!$licenseEndDate->gt($licenseStartDate)) {
                            $hasErrors = 1;
                            array_push($errors, "License End Date cannot be less than start date");
                        }
                    }
                }

                if ($policyForValidation->suminsured_subtype_type_id == SuminsuredSubtypeMaster::LOL_AGE_OF_EMPLOYEE) {
                    $lolDob = null;
                    if (isset($data->employee_dob)) {
                        $lolDob = validDate($data->employee_dob);
                        $lolDob = Carbon::parse($lolDob);
                    } elseif (isset($data->insured_member_dob)) {
                        $lolDob = validDate($data->insured_member_dob);
                        $lolDob = Carbon::parse($lolDob);
                    }
                    $age = $lolDob?->diffInYears($policyForValidation->start_date);

                    $ageRates = $policyForValidation?->rates?->whereNotNull('age_suminsured')->where('age_suminsured', $data->suminsured)
                        ->whereNotNull('age');

                    if ($ageRates->isEmpty()) {
                        $ageRates = $policyForValidation->rates->whereNotNull('age_suminsured');
                    }

                    $premiumRate = $ageRates?->filter(fn ($query) => $age >= explode("-", $query->age)[0] && $age <= explode("-", $query->age)[1]);

                    if (env("LOGS", false)) {
                        Log::info('rates', [$premiumRate]);
                    }
                    if ($premiumRate?->isEmpty()) {
                        $hasErrors = 1;
                        array_push($errors, "SI Not Covered");
                    }
                }
            }

            if ($policyForValidation?->policy_sub_type_id == PolicySubTypeMaster::LOL_BASE || $policyForValidation?->policy_sub_type_id == PolicySubTypeMaster::LOL_TOP_UP) {
                if (!isset($data->license_start_date)) {
                    $hasErrors = 1;
                    array_push($errors, 'License start date is required');
                }
                if (!isset($data->license_expiry_date)) {
                    $hasErrors = 1;
                    array_push($errors, 'License expiry date is required');
                }
                if (!isset($data->type_of_license)) {
                    // $hasErrors = 1;
                    // array_push($errors, 'type of license is required');
                }
                if (!isset($data->issuing_authority)) {
                    $hasErrors = 1;
                    array_push($errors, 'Issuing authority is required');
                }
                if (!isset($data->license_issuance_date)) {
                    $hasErrors = 1;
                    array_push($errors, 'license issuance date is required');
                }
                if (!isset($data->license_number)) {
                    $hasErrors = 1;
                    array_push($errors, 'license number is required');
                }
            }

            $ctcPattern = "/^[0-9,]+$/";
            $locationPattern = "/^[a-zA-Z0-9., ]+$/";
            if (isset($data->ctc)) {
                $ctc = $data->ctc;
                if (!preg_match($ctcPattern, $ctc)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['ctc']);
                }
            }

            if (isset($data->location)) {
                $location = $data->location;
                if (!preg_match($locationPattern, $location)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['location']);
                }
            }



            $selfPresentInSheet = $dataDumpToProcess->where('employee_code', '===', $data->employee_code)->where('relationship_with_employee', 'Self')->first();
            //not setting 0 for Parent cross selection validation
            // if ($selfPresentInSheet) {
            // $data->has_errors = 0;
            // $data->errors = NULL;
            // }

            //validation for spouse and/or partner
            $ageDetails = $policyForValidation->ageDetails;
            if ($ageDetails->contains('relation_id', 2) && $ageDetails->contains('relation_id', 10)) {
                if (isset($policyForValidation['spouse_partner_flag'])) {

                    $spousePartnerFlag = $policyForValidation['spouse_partner_flag'];

                    if ($spousePartnerFlag == 0) {
                        if ($data->relationship_with_employee == 'Partner') {
                            $partnerPresentInSheet = $dataDumpToProcess->where('employee_code', $data->employee_code)->where('relationship_with_employee', 'Spouse')->first();
                            if ($partnerPresentInSheet) {
                                $hasErrors = 1;
                                array_push($errors, 'Only One amongst Spouse and Partner allowed in policy, you are trying to add Both');
                            }

                            $employeeExists = MasterEmployee::where('code', $data->employee_code)->first();
                            if ($employeeExists) {
                                $employeePolicyRelation = EmployeePolicyRelation::with('employeeMember')->where('policy_id', optional($policyForValidation)->id)
                                    ->where('employee_id', $employeeExists->id)->first();
                                if ($employeePolicyRelation) {
                                    if ($employeePolicyRelation->employeeMember) {
                                        $ifHasSpouse = $employeePolicyRelation->employeeMember->where('relation_id', '2');
                                        if ($ifHasSpouse->count() > 0) {
                                            $hasErrors = 1;
                                            array_push($errors, 'Only One Relation amongst Spouse and partner allowed in policy, you already added Spouse and trying to add Partner');
                                        }
                                    }
                                }
                            }
                            // if ($currentEmployeeMembers) {
                            //     if ($currentEmployeeMembers->count > 0) {
                            //         $ifHasSpouse = $currentEmployeeMembers->where('relation_id', '2');
                            //         if ($ifHasSpouse) {
                            //             $hasErrors = 1;
                            //             array_push($errors, 'Only One amongst Spouse and Partner allowed in policy, you already added partner and trying to Spouse');
                            //         }
                            //     }
                            // }
                        }

                        if ($data->relationship_with_employee == 'Spouse') {
                            $partnerPresentInSheet = $dataDumpToProcess->where('employee_code', $data->employee_code)->where('relationship_with_employee', 'Partner')->first();

                            if ($partnerPresentInSheet) {
                                $hasErrors = 1;
                                array_push($errors, 'Only One amongst Spouse and Partner allowed in policy, you are trying to add Both');
                            }

                            $employeeExists = MasterEmployee::where('code', $data->employee_code)->first();
                            if ($employeeExists) {
                                $employeePolicyRelation = EmployeePolicyRelation::with('employeeMember')->where('policy_id', optional($policyForValidation)->id)
                                    ->where('employee_id', $employeeExists->id)->first();
                                if ($employeePolicyRelation) {
                                    if ($employeePolicyRelation->employeeMember) {
                                        $ifHasSpouse = $employeePolicyRelation->employeeMember->where('relation_id', '10');
                                        if ($ifHasSpouse->count() > 0) {
                                            $hasErrors = 1;
                                            array_push($errors, 'Only One Relation amongst Spouse and partner allowed in policy, you already added Partner and trying to add Spouse');
                                        }
                                    }
                                }
                            }
                            // if ($currentEmployeeMembers) {
                            //     if ($currentEmployeeMembers->count > 0) {
                            //         $ifHasPartner = $currentEmployeeMembers->where('relation_id', '10');
                            //         if ($ifHasPartner) {
                            //             $hasErrors = 1;
                            //             array_push($errors, 'Only One amongst Spouse and Partner allowed in policy, you already added Spouse and trying to Partner');
                            //         }
                            //     }
                            // }
                        }
                    }
                }
            }
            $selfPresentInSheet = $dataDumpToProcess->where('employee_code', '===', $data->employee_code)->where('relationship_with_employee', 'Self')->first();
            //For Parent Cross Selection logic
            if (!$data->errors) {
                $data->has_errors = 0;
                $data->errors = NULL;
            }

            $policyData = getPolicyData($policyForValidation);
            $whenPolicyIsOpd = $policyData['when_policy_is_opd'];
            $whenPolicyIsIpd = $policyData['when_policy_is_ipd'];

            $ipdSuminsuredType = $policyData['ipd_suminsured_type'];
            $ipdSuminsuredSubType = $policyData['ipd_suminsured_sub_type'];
            $opdSuminsuredType = $policyData['opd_suminsured_type'];
            $opdSuminsuredSubType = $policyData['opd_suminsured_sub_type'];

            $ipdPremiumType = $policyData['ipd_premium_type'];
            $opdPremiumType = $policyData['opd_premium_type'];

            if (!is_null($data->relationship_with_employee)) $data->relationship_with_employee = trim($data->relationship_with_employee);

            $relationship = $data->relationship_with_employee;

            $employerId = $policyForValidation->employer_id;

            $employerChildIds = [];

            $employeeExists = NULL;

            if (isset($data->employer_name)) {
                $employerChildIds = EmployerChildCompanies::where('employer_id', $employerId)->pluck('child_employer_id')->toArray();
                if ($employerChildIds) {
                    array_push($employerChildIds, $employerId);
                    $employeeExists = MasterEmployee::with('user', 'grade', 'designation', 'state')->where('code', $data->employee_code)->whereIn('employer_id', $employerChildIds)->first();
                }
            } else {
                $employeeExists = MasterEmployee::where('code', optional($data)->employee_code)->where('employer_id', optional($policyForValidation)->employer_id)->first();
            }

            $relationData = RelationMaster::where('name', $relationship)->first();
            $relationId = $relationData?->id;
            $ageDetail = PolicyAgeDetails::where('policy_id', optional($policyForValidation)->id)->where('relation_id', optional($relationData)->id)->first();
            // $employeeExists = MasterEmployee::where('code', optional($data)->employee_code)->where('employer_id', optional($policyForValidation)->employer_id)->first();
            $employeeExistInDumpData = $dataDumpToProcess->where('employee_code', '===', $data->employee_code)->where('relationship_with_employee', 'Self')->first();
            $policyRates = MasterPolicyRates::where('policy_id', $policyForValidation->id)->get();
            // $epr = EmployeePolicyRelation::where('policy_id', optional($policyForValidation)->id)->get();


            $employerId = $policyForValidation?->employer_id;
            if ($data->employer_name) {
                $masterEmployer = MasterEmployers::where('name', secure($data->employer_name, 'E'))->first();
                if ($masterEmployer) {
                    $employerId = $masterEmployer->id;
                }
            }



            $allowedRelationsIdIntoPolicy = PolicyAgeDetails::wherePolicyId($policyForValidation->id)->pluck('relation_id')->toArray();
            $allowedRelationsIntoPolicy = RelationMaster::whereIn('id', $allowedRelationsIdIntoPolicy)->pluck('name')->toArray();


            $namePattern = "/^[a-zA-Z. ]/";
            $employeeCodePattern = "/^[a-zA-Z0-9 -_\/]*$/i";
            $emailPattern = "^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$^";

            if (!is_null($data->employee_code)) $data->employee_code = trim($data->employee_code);
            if (!is_null($data->employee_email)) $data->employee_email = trim($data->employee_email);
            if (!is_null($data->employee_first_name)) $data->employee_first_name = trim($data->employee_first_name);
            if (!is_null($data->employee_last_name)) $data->employee_last_name = trim($data->employee_last_name);


            //3. Employee DOJ Validation
            if (!is_null($data->employee_date_of_joining)) {
                if (!validDate($data->employee_date_of_joining)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['invalid_employee_date_of_joining']);
                } else {
                    $data->employee_date_of_joining = validDate($data->employee_date_of_joining);
                    $parsedDoj = Carbon::parse($data->employee_date_of_joining)->format('d-m-Y');
                    $parsedPolicyEndDate = Carbon::parse($policyForValidation->end_date)->format('d-m-Y');


                    if (Carbon::parse($parsedDoj) > Carbon::parse($parsedPolicyEndDate)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['invalid_employee_doj']);
                    }
                }
            }

            //4. Inception/Endorsement Date Validation
            if (!is_null($data->inceptionendorsement_date)) {
                if (!validDate($data->inceptionendorsement_date)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['invalid_inceptionendorsement_date_of_joining']);
                } else {
                    $data->inceptionendorsement_date = validDate($data->inceptionendorsement_date);
                }
            }

            //5. Date of Marriage DOB Validation
            if (!is_null($data->date_of_marriage)) {
                if (!validDate($data->date_of_marriage)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['invalid_date_of_marriage']);
                } else {
                    $data->date_of_marriage = validDate($data->date_of_marriage);
                }
            }

            //6. Effective Date Validation
            if (!is_null($data->effective_date)) {
                if (!validDate($data->effective_date)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['invalid_effective_date']);
                } else {
                    $parsedEffectiveDate = Carbon::parse(validDate($data->effective_date))->toDate();
                    $parsedPolicyStartDate = Carbon::parse($policyForValidation->start_date)->toDate();
                    $parsedPolicyEndDate = Carbon::parse($policyForValidation->end_date)->toDate();
                    if ($parsedEffectiveDate < $parsedPolicyStartDate) {
                        $hasErrors = 1;
                        array_push($errors, $messages['effective_date_should_be_greater_than_policy_start_date']);
                    } elseif ($parsedEffectiveDate > $parsedPolicyEndDate) {
                        $hasErrors = 1;
                        array_push($errors, $messages['effective_date_should_be_less_than_policy_end_date']);
                    } elseif (validDate($data->employee_date_of_joining)) {
                        $parsedDoj = Carbon::parse(validDate($data->employee_date_of_joining))->toDate();
                        if ($parsedEffectiveDate < $parsedDoj) {
                            $hasErrors = 1;
                            array_push($errors, $messages['effective_date_should_be_greater_than_doj']);
                        }
                    } else {
                        $epr = EmployeePolicyRelation::where('employee_id', $employeeExists?->id)->where('policy_id', $policyForValidation->id)->first();
                        if ($epr) {
                            $eprPrsedEffectiveDate = Carbon::parse($epr->addition_effective_date)->toDate();
                            if ($eprPrsedEffectiveDate != $parsedEffectiveDate) {
                                $hasErrors = 1;
                                array_push($errors, $messages['miss_match_effective_date']);
                            }
                        }
                    }
                    $data->effective_date = validDate($data->effective_date);
                }
            }

            //5. Date of Marriage DOB Validation
            if (!is_null($data->data_received_on)) {
                if (!validDate($data->data_received_on)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['invalid_data_received_on_date']);
                } else {
                    $data->data_received_on = validDate($data->data_received_on);
                }
            }

            //Employee Code Required
            if (is_null($data->employee_code)) {
                $hasErrors = 1;
                array_push($errors, $messages['employee_code_is_required']);
            } else {
                if (!preg_match($employeeCodePattern, $data->employee_code)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['invalid_employee_code']);
                }
            }


            if (!is_null($data->installment)) {
                $installmentSubArray = explode(" ", $data->installment);
                if (!ctype_digit($installmentSubArray[0] ?? 'NULL')) {
                    $hasErrors = 1;
                    array_push($errors, $messages['invalid_installment']);
                }
            }

            // 5. Employer Exists
            if (!is_null($data->employer_name)) {
                $masterEmployer = MasterEmployers::where('name', secure($data->employer_name, 'E'))->exists();
                if (!$masterEmployer) {
                    $hasErrors = 1;
                    array_push($errors, $messages['invalid_employer']);
                }
            }

            //11.1 Relationship with employee is required.
            $relationshipWithEmployeeIsEmpty = 0;
            if (is_null($relationship)) {
                $hasErrors = 1;
                array_push($errors, $messages['relationship_required']);
                $relationshipWithEmployeeIsEmpty = 1;
            }

            if (!in_array($relationship, $allowedRelationsIntoPolicy) && $relationshipWithEmployeeIsEmpty == 0) {
                $hasErrors = 1;
                array_push($errors, $messages['relation_into_policy_not_allowed']);
            }

            if ($relationId == RelationMaster::SELF || $relationId == RelationMaster::SPOUSE) {

                if ($relationId == RelationMaster::SELF) {
                    $memberDob = validDate($data->employee_dob);
                } else {
                    $memberDob = validDate($data->insured_member_dob);
                }
                $memberDateOfMarriage = validDate($data->date_of_marriage);

                if ($memberDob && $memberDateOfMarriage) {
                    $parsedMemberDob = Carbon::parse($memberDob);
                    $parsedMemberDateOfMarriage = Carbon::parse($memberDateOfMarriage);
                    if ($parsedMemberDob->gt($parsedMemberDateOfMarriage)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['dob_is_grater_then_dom']);
                    }
                    if ($parsedMemberDob->diffInYears($parsedMemberDateOfMarriage) < 18) {
                        $hasErrors = 1;
                        array_push($errors, $messages['dom_is_less_than_18_years']);
                    }
                }

                if ($memberDateOfMarriage) {
                    $parsedMemberDateOfMarriage = Carbon::parse($memberDateOfMarriage);
                    $isFutureDateOfMarriage = $parsedMemberDateOfMarriage->gt(today()->toDate());
                    if ($isFutureDateOfMarriage) {
                        $hasErrors = 1;
                        array_push($errors, $messages['future_dom']);
                    }
                }
            }



            //Validation only applicable for employee.
            if ($relationId == RelationMaster::SELF) {

                //Employee DOB validation
                if (!is_null($data->employee_dob)) {
                    if (!validDate($data->employee_dob)) {
                        $hasErrors = 1;
                        array_push($errors, trans('validation.invalid_date_format', ['attribute' => 'employee dob']));
                    } else {
                        $data->employee_dob = validDate($data->employee_dob);
                    }
                } else {
                    $data->has_errors = 1;
                    $hasErrors = 1;
                    array_push($errors, trans('validation.field_required', ['attribute' => 'Employee dob']));
                }

                if (!isset($data->employee_gender)) {
                    $data->has_errors = 1;
                    $hasErrors = 1;
                    array_push($errors, trans('validation.field_required', ['attribute' => 'Employee gender']));
                }

                if (is_null($data->employee_email)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['employee_email_required']);
                } else {
                    if (!preg_match($emailPattern, $data->employee_email)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['invalid_email_format']);
                    }
                }

                if (is_null($data->employee_date_of_joining)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['employee_date_of_joining_required']);
                }


                if (is_null($data->employee_first_name)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['employee_first_name_required']);
                } else {
                    if (!preg_match($namePattern, $data->employee_first_name)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['invalid_employee_first_name']);
                    }
                }

                if (isset($data->employee_last_name) || $data->employee_last_name != "") {
                    if (!preg_match($namePattern, $data->employee_last_name)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['invalid_employee_last_name']);
                    }
                }

                if (!is_null($data->default_password)) {
                    if (strlen($data->default_password) < 8) {
                        $hasErrors = 1;
                        array_push($errors, $messages['min_password_length']);
                    } elseif (preg_match("/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.{8,})/", $data->default_password) != 1) {
                        $hasErrors = 1;
                        array_push($errors, $messages['invaild_password_pattern']);
                    }
                }


                if (!is_null($data->employee_state)) {
                    $stateExists = MasterState::where('state_name', $data->employee_state)->exists();
                    if (!$stateExists) {
                        $hasErrors = 1;
                        array_push($errors, $messages['invalid_state']);
                    }
                }

                //11.3 DOJ & DOB to be different.
                if (validDate($data->employee_dob) && validDate($data->employee_date_of_joining)) {
                    $employeeDob = Carbon::parse($data->employee_dob);
                    $employeeDOJ = Carbon::parse($data->employee_date_of_joining);

                    if ($employeeDob->equalTo($employeeDOJ)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['dob_and_doj_same']);
                    }
                }


                //1. Duplicate Employee Code Found in Dumped Data.
                $duplicateEmployeeCodeInDumpedDataCount = EndrosementDataDump::where('excel_report_id', $this->excelReportId)
                    ->where('policy_id', $this->policyId)
                    ->where('relationship_with_employee', 'Self')
                    ->where('employee_code', $data->employee_code)->count();

                if ($duplicateEmployeeCodeInDumpedDataCount > 1) {
                    $hasErrors = 1;
                    array_push($errors, $messages['duplicate_employee_code_found_in_sheet']);
                }

                //2. Duplicate Employee Code Found in same employer.
                $alreadyEmployeeCodeExistWithSameEmployer = MasterEmployee::where('code', $data->employee_code)->where('employer_id', $employerId)->first();
                $employeeExistInPolicy = false;
                if (!is_null($alreadyEmployeeCodeExistWithSameEmployer)) {
                    $employeePolicyRelation = EmployeePolicyRelation::where('policy_id', optional($policyForValidation)->id)
                        ->where('employee_id', $alreadyEmployeeCodeExistWithSameEmployer->id)->first();
                    if ($employeeExistInPolicy) {
                        $employeeExistInPolicy = true;
                    }
                }
                if ($employeeExistInPolicy && $data->type_id == 1) {
                    $hasErrors = 1;
                    array_push($errors, $messages['employee_already_exist_in_policy']);
                }

                //3. Employee with duplicate email
                $duplicateEmployeeEmailInDumpedDataCount = EndrosementDataDump::where('excel_report_id', $this->excelReportId)
                    ->where('policy_id', $this->policyId)
                    ->where('relationship_with_employee', 'Self')
                    ->where('employee_email', $data->employee_email)->count();
                // $duplicateEmployeeEmailInDumpedDataCount = $dataDumpToProcess->where('relationship_with_employee', 'Self')
                //     ->where('employee_email', $data->employee_email)->count();

                if ($duplicateEmployeeEmailInDumpedDataCount > 1) {
                    $hasErrors = 1;
                    array_push($errors, $messages['duplicate_employee_email_found_in_sheet']);
                }

                // Has Death Certificate Found for both parents
                $hasDeathCertificateFoundForBothParents = EndrosementDataDump::where('excel_report_id', $this->excelReportId)
                    ->where('policy_id', $this->policyId)
                    ->whereIn('relation_id', [5, 6])
                    ->where('employee_code', $data->employee_code)
                    ->where('has_death_certificate', 1)->count();
                if ($hasDeathCertificateFoundForBothParents > 1) {
                    $hasErrors = 1;
                    array_push($errors, $messages['death_certificate_for_both_parents_found_in_sheet']);
                }

                // Has Death Certificate Found for both parents-in-law
                $hasDeathCertificateFoundForBothParentsInLaw = EndrosementDataDump::where('excel_report_id', $this->excelReportId)
                    ->where('policy_id', $this->policyId)
                    ->whereIn('relation_id', [7, 8])
                    ->where('employee_code', $data->employee_code)
                    ->where('has_death_certificate', 1)->count();
                if ($hasDeathCertificateFoundForBothParentsInLaw > 1) {
                    $hasErrors = 1;
                    array_push($errors, $messages['death_certificate_for_both_parents_in_law_found_in_sheet']);
                }

                //Code with different emailId exist in system
                $codeExist = MasterEmployee::with('user')->where('employer_id', optional($policyForValidation)->employer_id)->where('code', $data->employee_code)->first();
                if (!is_null($codeExist)) {
                    if ($codeExist->exists) {
                        if (strtolower($codeExist->user->email) != strtolower($data->employee_email)) {
                            $hasErrors = 1;
                            array_push($errors, 'Employee code with email id ' . $codeExist->user->email . ' already exists.');
                        }
                    }
                }


                //Cover type validation is required
                if ($ipdSuminsuredType == SuminsuredTypeMaster::INDIVIDUAL_AND_FAMILY_COVER) {
                    if (is_null($data->cover_type)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['cover_type_is_required']);
                    } else {
                        if (!in_array($data->cover_type, ['Individual', 'Family Cover'])) {
                            $hasErrors = 1;
                            array_push($errors, $messages['invalid_cover_type']);
                        }
                    }
                }


                // Employee Email Exist in other organization

                $user = User::where('email', $data->employee_email)->first();
                if ($user) {
                    if ($user->master_user_types_id > 9) {
                        $masterUserType = $user->userType ? $user->userType->name : $user->master_user_types_id;
                        $userTypeArray =  str_split($masterUserType);
                    } else {
                        $userTypeArray = [$user->master_user_types_id];
                    }
                    // //Broker
                    // if (in_array(3, $userTypeArray)) {
                    //     $brokerUser = BrokerUserMapping::where('user_id', $user->id)->where('broker_id', 1)->first();
                    //     if (is_null($brokerUser)) {
                    //         $hasErrors = 1;
                    //         array_push($errors, $messages['employee_email_id_exist']);
                    //     }
                    // }
                    //Employer
                    if (in_array(4, $userTypeArray)) {
                        $employerUser = EmployerUserMapping::where('user_id', $user->id)->first();
                        if ($employerUser) {
                            if ($employerUser->employer_id != $employerId) {
                                $hasErrors = 1;
                                array_push($errors, $messages['employee_email_id_exist']);
                            }
                        }
                    }
                    //Employee

                    $getEmployerIds = [];

                    if (isset($data->employer_name)) {
                        $getEmployerIds = EmployerChildCompanies::where('employer_id', $employerId)->pluck('child_employer_id')->toArray();
                        if (!empty($getEmployerIds)) {
                            array_push($getEmployerIds, $employerId);
                        } else {
                            $getEmployerIds = [$employerId];
                        }
                        $employeeExistWithSameEmployer = MasterEmployee::where('user_id', $user->id)->whereIn('employer_id', $getEmployerIds)->first();
                    } else {
                        $employeeExistWithSameEmployer = MasterEmployee::where('user_id', $user->id)->where('employer_id', $employerId)->first();
                    }
                    if (in_array(5, $userTypeArray)) {
                        if (!$employeeExistWithSameEmployer) {
                            $employeeExistWithOtherEmployer = MasterEmployee::where('user_id', $user->id)->exists();
                            if ($employeeExistWithOtherEmployer) {
                                $hasErrors = 1;
                                array_push($errors, $messages['employee_email_id_exist']);
                            }
                        }
                    }

                    //Email id with different code exists in system
                    if ($employeeExistWithSameEmployer) {
                        if (strtolower($employeeExistWithSameEmployer->code) != strtolower($data->employee_code)) {
                            $hasErrors = 1;
                            array_push($errors, 'Employee email id with code ' . $employeeExistWithSameEmployer->code . ' already exists.');
                        }
                    }
                }



                //Grade SI Validation.
                if (in_array($ipdSuminsuredSubType, SuminsuredSubtypeMaster::GRADE_RATERS) || in_array($opdSuminsuredSubType, SuminsuredSubtypeMaster::GRADE_RATERS)) {
                    if (is_null($data->employee_grade)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['employee_grade_is_required']);
                    }
                }

                //Designation SI Validation
                if (in_array($ipdSuminsuredSubType, SuminsuredSubtypeMaster::DESIGNATION_RATERS) || in_array($opdSuminsuredSubType, SuminsuredSubtypeMaster::DESIGNATION_RATERS)) {
                    if (is_null($data->employee_designation)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['employee_designation_is_required']);
                    }
                }

                //Grade Pre Validation
                if (in_array($ipdPremiumType, MasterPremium::GRADE_RATERS) || in_array($opdPremiumType, MasterPremium::GRADE_RATERS)) {
                    if (is_null($data->employee_grade)) {
                        $hasErrors = 1;
                        if (!in_array($messages['employee_grade_is_required'], $errors)) {
                            array_push($errors, $messages['employee_grade_is_required']);
                        }
                    }
                }
                //Designation Pre Validation
                if (in_array($ipdPremiumType, MasterPremium::DESIGNATION_RATERS) || in_array($opdPremiumType, MasterPremium::DESIGNATION_RATERS)) {
                    if (is_null($data->employee_designation)) {
                        $hasErrors = 1;
                        if (!in_array($messages['employee_designation_is_required'], $errors)) {
                            array_push($errors, $messages['employee_designation_is_required']);
                        }
                    }
                }

                //11.5 moible number validation
                if (!is_null($data->employee_mobile_number)) {
                    if (strlen($data->employee_mobile_number) != 10) {
                        $hasErrors = 1;
                        array_push($errors, $messages['employee_incorrect_mobile_no_length']);
                    } elseif (!ctype_digit($data->employee_mobile_number)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['employee_invalid_mobile_no']);
                    }
                }

                //Salary Validation
                if ($data->employee_annual_salary && !is_numeric($data->employee_annual_salary)) {
                    $hasErrors = 1;
                    array_push($errors, 'Salary 1 must be a number.');
                }
                if ($data->employee_annual_salary_2 && !is_numeric($data->employee_annual_salary_2)) {
                    $hasErrors = 1;
                    array_push($errors, 'Salary 2 must be a number.');
                }
                if ($data->employee_annual_salary_3 && !is_numeric($data->employee_annual_salary_3)) {
                    $hasErrors = 1;
                    array_push($errors, 'Salary 3 must be a number.');
                }
                if ($data->employee_variables_in_salary && !is_numeric($data->employee_variables_in_salary)) {
                    $hasErrors = 1;
                    array_push($errors, 'Variable Salary 1 must be a number.');
                }
                if ($data->employee_variables_in_salary_2 && !is_numeric($data->employee_variables_in_salary_2)) {
                    $hasErrors = 1;
                    array_push($errors, 'Variable Salary 2 must be a number.');
                }
                if ($data->employee_variables_in_salary_3 && !is_numeric($data->employee_variables_in_salary_3)) {
                    $hasErrors = 1;
                    array_push($errors, 'Variable Salary 3 must be a number.');
                }


                if ($ipdSuminsuredSubType == SuminsuredSubtypeMaster::NUMBER_OF_TIME_SALARY || $opdSuminsuredSubType == SuminsuredSubtypeMaster::NUMBER_OF_TIME_SALARY) {
                    if ($policyForValidation->calculate_eligibility_from == 'salary_1') {
                        if (is_null($data->employee_annual_salary)) {
                            $hasErrors = 1;
                            array_push($errors, $messages['employee_annual_salary_required']);
                        }
                    }

                    if ($policyForValidation->calculate_eligibility_from == 'salary_2') {
                        if (is_null($data->employee_annual_salary_2)) {
                            $hasErrors = 1;
                            array_push($errors, $messages['employee_annual_salary_2_required']);
                        }
                    }

                    if ($policyForValidation->calculate_eligibility_from == 'salary_3') {
                        if (is_null($data->employee_annual_salary_3)) {
                            $hasErrors = 1;
                            array_push($errors, $messages['employee_annual_salary_3_required']);
                        }
                    }

                    if (is_null($data->employee_number_of_time_salary)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['employee_number_of_time_salary_required']);
                    } else {
                        $allowedNumberOfTimesInSalaryArray = $policyRates->whereNotNull('no_of_times_of_salary')->pluck('no_of_times_of_salary')->toArray();
                        if (
                            $ipdSuminsuredSubType == SuminsuredSubtypeMaster::RELATION_WISE_NUMBER_OF_TIME_SALARY || $opdSuminsuredSubType == SuminsuredSubtypeMaster::RELATION_WISE_NUMBER_OF_TIME_SALARY
                            || $ipdPremiumType == MasterPremium::RELATION_WISE_NUMBER_OF_TIME_SALARY_PERMILY_RATE || $opdPremiumType == MasterPremium::RELATION_WISE_NUMBER_OF_TIME_SALARY_PERMILY_RATE
                        ) {
                            if ($relationData) {
                                $allowedNumberOfTimesInSalarySiArray = $policyRates->whereNull('relation_permilly')->where('relation_id', $relationData->id)->pluck('no_of_times_of_salary')->toArray();
                                $allowedNumberOfTimesInSalaryPremiumArray = $policyRates->whereNotNull('relation_permilly')->where('relation_id', $relationData->id)->pluck('no_of_times_of_salary')->toArray();
                                $allowedNumberOfTimesInSalaryArray = array_intersect($allowedNumberOfTimesInSalarySiArray, $allowedNumberOfTimesInSalaryPremiumArray);
                                if (!in_array($data->employee_number_of_time_salary, $allowedNumberOfTimesInSalaryArray)) {
                                    $hasErrors = 1;
                                    array_push($errors, 'Number of time salary ' . $data->employee_number_of_time_salary . ' is not configured for ' . $relationship);
                                }
                            }
                        } else {
                            if (!in_array($data->employee_number_of_time_salary, $allowedNumberOfTimesInSalaryArray)) {
                                $hasErrors = 1;
                                array_push($errors, $messages['invalid_employee_number_of_time_salary']);
                            }
                        }
                    }
                }
            } else {

                // Validation for Self exclude policy
                $selfAgeDetail = $policyForValidation->ageDetails->where('relation_id', 1);
                // if (@$selfAgeDetail->isEmpty()) {
                //     if ($relationData->id == 3 || $relationData->id == 4) {
                //         if ($employeeExists) {
                //             $employeePolicyRelation = $epr->where('employee_id', $employeeExists->id)->first();
                //             if (!$employeePolicyRelation) {
                //                 $hasErrors = 1;
                //                 array_push($errors, $messages['self_or_spouse_is_required']);
                //             } else {
                //                 $employeeMembers = EmployeeMembers::where('emp_id', $employeeExists->id)->where('employee_policy_mapping_id', $employeePolicyRelation->id)->get();
                //                 $selfOrSpouseExists = $employeeMembers->whereIn('relation_id', [1, 2]);
                //                 if (@$selfOrSpouseExists->isEmpty()) {
                //                     $hasErrors = 1;
                //                     array_push($errors, $messages['self_or_spouse_is_required']);
                //                 }
                //             }
                //         }
                //     }
                // }

                //Death Certificate Validation
                // if (in_array($relationId, RelationMaster::PARENTS)) {
                //     $deathCertificateIsRequired = $policyForValidation->ageDetails->whereIn('relation_id', RelationMaster::PARENTS)->first()?->is_death_certificate_required;
                //     if ($deathCertificateIsRequired) {
                //         $epr = EmployeePolicyRelation::where('policy_id', $policyForValidation?->id)->where('employee_id', $employeeExists?->id)->first();
                //         if ($epr) {
                //             $firstP = $epr->employeePolicyMembers->whereIn('relation_id', RelationMaster::PARENTS)->first();
                //             $deathCertificateIsUploaded = $firstP?->media?->where('collection_name', 'death_certificates')->last();
                //             if ($deathCertificateIsUploaded) {
                //                 $hasErrors = 1;
                //                 array_push($errors, $messages['death_certicifate_uploaded']);
                //             }
                //         }
                //     }
                // }
                // if (in_array($relationId, RelationMaster::PARENTS_IN_LAW)) {
                //     $deathCertificateIsRequired = $policyForValidation->ageDetails->whereIn('relation_id', RelationMaster::PARENTS_IN_LAW)->first()?->is_death_certificate_required;
                //     if ($deathCertificateIsRequired) {
                //         $epr = EmployeePolicyRelation::where('policy_id', $policyForValidation?->id)->where('employee_id', $employeeExists?->id)->first();
                //         if ($epr) {
                //             $firstP = $epr->employeePolicyMembers->whereIn('relation_id', RelationMaster::PARENTS_IN_LAW)->first();
                //             $deathCertificateIsUploaded = $firstP?->media?->where('collection_name', 'death_certificates')->last();
                //             if ($deathCertificateIsUploaded) {
                //                 $hasErrors = 1;
                //                 array_push($errors, $messages['death_certicifate_uploaded']);
                //             }
                //         }
                //     }
                // }

                //New Death Certificate Validation
                if (in_array($relationId, RelationMaster::PARENTS_AND_PARENTS_IN_LAW)) {

                    $parentInSheetCount = 0;
                    $parentInLawInSheetCount = 0;
                    $isCheckDeathCertificate = 0;

                    $parentsInSheet = EndrosementDataDump::where('employee_code', $data?->employee_code)
                        ->where('type_id', 1)
                        ->where('excel_report_id', $this->excelReportId)
                        ->where('policy_id', $policyForValidation->id)
                        ->whereIn('relationship_with_employee',  ['Father', 'Mother', 'Father-in-law', 'Mother-in-law'])
                        ->get();

                    $parentInSheetCount = $parentsInSheet->whereIn('relationship_with_employee', ['Father', 'Mother'])->count();
                    $parentInLawInSheetCount = $parentsInSheet->whereIn('relationship_with_employee', ['Father-in-law', 'Mother-in-law'])->count();


                    $policyAgeDetailData = $policyForValidation->ageDetails->where('relation_id', $relationId)->first();
                    if ($policyAgeDetailData) {

                        if ($policyAgeDetailData->is_death_certificate_required == 1) {


                            if ($this->isInception == 1 && !is_null($policyAgeDetailData->is_death_certificate_endorsement_type) && $policyAgeDetailData->is_death_certificate_endorsement_type == 1) {
                                $isCheckDeathCertificate = 1;
                            } elseif ($this->isInception == 0 && !is_null($policyAgeDetailData->is_death_certificate_endorsement_type) && $policyAgeDetailData->is_death_certificate_endorsement_type == 2) {
                                $isCheckDeathCertificate = 1;
                            } elseif (($this->isInception == 0 || $this->isInception == 1) && !(is_null($policyAgeDetailData->is_death_certificate_endorsement_type) && $policyAgeDetailData->is_death_certificate_endorsement_type == 3)) {
                                $isCheckDeathCertificate = 1;
                            }
                            if ($data->has_death_certificate == 1) {

                                if ($policyAgeDetailData->is_death_certificate_document_mandatory == 1 && $isCheckDeathCertificate == 1) {
                                    $employeeMemberDeathCertificate = EmployeeMemberDeathCertificate::where('employer_id', $policyForValidation->employer_id)->where('employee_id', $employeeExists?->id)->get();
                                    if ($employeeMemberDeathCertificate) {

                                        if ($parentInSheetCount == 1) {
                                            if ($relationId == RelationMaster::FATHER) {
                                                $fatherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER)->first();
                                                if (!is_null($fatherDeathCertificate)) {
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {

                                                    $motherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER)->first();
                                                    if (!$motherDeathCertificate) {
                                                        $hasErrors = 1;
                                                        array_push($errors, $messages['death_certificate_not_uploaded']);
                                                    } else {
                                                        $data->certificate_available = 1;
                                                    }
                                                }
                                            } elseif ($relationId == RelationMaster::MOTHER) {

                                                $motherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER)->first();
                                                if (!is_null($motherDeathCertificate)) {
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {

                                                    $fatherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER)->first();
                                                    if (!$fatherDeathCertificate) {
                                                        $hasErrors = 1;
                                                        array_push($errors, $messages['death_certificate_not_uploaded']);
                                                    } else {
                                                        $data->certificate_available = 1;
                                                    }
                                                }
                                            }
                                        }

                                        if ($parentInLawInSheetCount == 1) {
                                            if ($relationId == RelationMaster::FATHER_IN_LAW) {

                                                $fatherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER_IN_LAW)->first();
                                                if (!is_null($fatherInLawDeathCertificate)) {
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {

                                                    $motherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER_IN_LAW)->first();
                                                    if (!$motherInLawDeathCertificate) {
                                                        $hasErrors = 1;
                                                        array_push($errors, $messages['death_certificate_not_uploaded']);
                                                    } else {
                                                        $data->certificate_available = 1;
                                                    }
                                                }
                                            } elseif ($relationId == RelationMaster::MOTHER_IN_LAW) {
                                                $motherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER_IN_LAW)->first();
                                                if (!is_null($motherInLawDeathCertificate)) {
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {

                                                    $fatherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER_IN_LAW)->first();
                                                    if (!$fatherInLawDeathCertificate) {
                                                        $hasErrors = 1;
                                                        array_push($errors, $messages['death_certificate_not_uploaded']);
                                                    } else {
                                                        $data->certificate_available = 1;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif ($policyAgeDetailData->is_death_certificate_document_mandatory == 0 && $isCheckDeathCertificate == 1) {
                                    $employeeMemberDeathCertificate = EmployeeMemberDeathCertificate::where('employer_id', $policyForValidation->employer_id)->where('employee_id', $employeeExists?->id)->get();
                                    if ($employeeMemberDeathCertificate) {
                                        if ($parentInSheetCount == 1) {
                                            if ($relationId == RelationMaster::FATHER) {
                                                $fatherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER)->first();
                                                if (!is_null($fatherDeathCertificate)) {
                                                    Log::info('line 2548');
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {
                                                    $data->certificate_available = 1;
                                                }
                                            } elseif ($relationId == RelationMaster::MOTHER) {
                                                $motherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER)->first();
                                                if (!is_null($motherDeathCertificate)) {
                                                    Log::info('line 2561');
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {
                                                    $data->certificate_available = 1;
                                                }
                                            }
                                        }

                                        if ($parentInLawInSheetCount == 1) {
                                            if ($relationId == RelationMaster::FATHER_IN_LAW) {

                                                $fatherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER_IN_LAW)->first();
                                                if (!is_null($fatherInLawDeathCertificate)) {
                                                    Log::info('line 2578');
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {
                                                    $data->certificate_available = 1;
                                                }
                                            } elseif ($relationId == RelationMaster::MOTHER_IN_LAW) {
                                                $motherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER_IN_LAW)->first();
                                                if (!is_null($motherInLawDeathCertificate)) {
                                                    Log::info('line 2590');
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {
                                                    $data->certificate_available = 1;
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif ($data->has_death_certificate == 0) {
                                if ($policyAgeDetailData->is_death_certificate_document_mandatory == 1 && $isCheckDeathCertificate == 1) {
                                    $employeeMemberDeathCertificate = EmployeeMemberDeathCertificate::where('employer_id', $policyForValidation->employer_id)->where('employee_id', $employeeExists?->id)->get();
                                    if ($employeeMemberDeathCertificate) {

                                        if ($parentInSheetCount == 1) {
                                            if ($relationId == RelationMaster::FATHER) {
                                                $fatherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER)->first();
                                                if (!is_null($fatherDeathCertificate)) {
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {
                                                    $motherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER)->first();
                                                    if (!is_null($motherDeathCertificate)) {
                                                        $hasErrors = 1;
                                                        array_push($errors, $messages['has_death_certificate_to_be_yes']);
                                                    }
                                                }
                                            } elseif ($relationId == RelationMaster::MOTHER) {
                                                $motherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER)->first();
                                                if (!is_null($motherDeathCertificate)) {
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {
                                                    $fatherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER)->first();
                                                    if (!is_null($fatherDeathCertificate)) {
                                                        $hasErrors = 1;
                                                        array_push($errors, $messages['has_death_certificate_to_be_yes']);
                                                    }
                                                }
                                            }
                                        }

                                        if ($parentInLawInSheetCount == 1) {
                                            if ($relationId == RelationMaster::FATHER_IN_LAW) {

                                                $fatherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER_IN_LAW)->first();
                                                if (!is_null($fatherInLawDeathCertificate)) {
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {
                                                    $motherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER_IN_LAW)->first();
                                                    if (!is_null($motherInLawDeathCertificate)) {
                                                        $hasErrors = 1;
                                                        array_push($errors, $messages['has_death_certificate_to_be_yes']);
                                                    }
                                                }
                                            } elseif ($relationId == RelationMaster::MOTHER_IN_LAW) {
                                                $motherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER_IN_LAW)->first();
                                                if (!is_null($motherInLawDeathCertificate)) {
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {
                                                    $fatherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER_IN_LAW)->first();
                                                    if (!is_null($fatherInLawDeathCertificate)) {
                                                        $hasErrors = 1;
                                                        array_push($errors, $messages['has_death_certificate_to_be_yes']);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif ($policyAgeDetailData->is_death_certificate_document_mandatory == 0 && $isCheckDeathCertificate == 1) {
                                    $employeeMemberDeathCertificate = EmployeeMemberDeathCertificate::where('employer_id', $policyForValidation->employer_id)->where('employee_id', $employeeExists?->id)->get();
                                    if ($employeeMemberDeathCertificate) {

                                        if ($parentInSheetCount == 1) {
                                            if ($relationId == RelationMaster::FATHER) {
                                                $fatherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER)->first();
                                                if (!is_null($fatherDeathCertificate)) {
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {
                                                    $motherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER)->first();
                                                    if (!is_null($motherDeathCertificate)) {
                                                        $hasErrors = 1;
                                                        array_push($errors, $messages['has_death_certificate_to_be_yes']);
                                                    }
                                                }
                                            } elseif ($relationId == RelationMaster::MOTHER) {

                                                $motherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER)->first();
                                                if (!is_null($motherDeathCertificate)) {
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {
                                                    $fatherDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER)->first();
                                                    if (!is_null($fatherDeathCertificate)) {
                                                        $hasErrors = 1;
                                                        array_push($errors, $messages['has_death_certificate_to_be_yes']);
                                                    }
                                                }
                                            }
                                        }

                                        if ($parentInLawInSheetCount == 1) {
                                            if ($relationId == RelationMaster::FATHER_IN_LAW) {

                                                $fatherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER_IN_LAW)->first();
                                                if (!is_null($fatherInLawDeathCertificate)) {
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {
                                                    $motherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER_IN_LAW)->first();
                                                    if (!is_null($motherInLawDeathCertificate)) {
                                                        $hasErrors = 1;
                                                        array_push($errors, $messages['has_death_certificate_to_be_yes']);
                                                    }
                                                }
                                            } elseif ($relationId == RelationMaster::MOTHER_IN_LAW) {
                                                $motherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::MOTHER_IN_LAW)->first();
                                                if (!is_null($motherInLawDeathCertificate)) {
                                                    $hasErrors = 1;
                                                    array_push($errors, $messages['death_certificate_uploaded']);
                                                } else {
                                                    $fatherInLawDeathCertificate =  $employeeMemberDeathCertificate->where('relation_id', RelationMaster::FATHER_IN_LAW)->first();
                                                    if (!is_null($fatherInLawDeathCertificate)) {
                                                        $hasErrors = 1;
                                                        array_push($errors, $messages['has_death_certificate_to_be_yes']);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // parent count validation

                if (in_array($relationId, RelationMaster::PARENTS_AND_PARENTS_IN_LAW)) {
                    $parentsInSheet = EndrosementDataDump::where('employee_code', $data?->employee_code)
                        ->where('type_id', 1)
                        ->where('excel_report_id', $this->excelReportId)
                        ->where('policy_id', $policyForValidation->id)
                        ->whereIn('relationship_with_employee',  ['Father', 'Mother', 'Father-in-law', 'Mother-in-law'])
                        ->get();
                    if ($policyForValidation->has_parent_cross_selection == 0) {

                        $firstParent = $parentsInSheet->first();
                        foreach ($parentsInSheet as $parent) {
                            if ((in_array($firstParent->relationship_with_employee, ['Father', 'Mother']) && in_array($parent->relationship_with_employee, ['Father-in-law', 'Mother-in-law']))
                                || (in_array($firstParent->relationship_with_employee, ['Father-in-law', 'Mother-in-law']) && in_array($parent->relationship_with_employee, ['Father', 'Mother']))
                            ) {
                                $message = ['Parent cross selection not allowed into this policy'];
                                $parent->has_errors = 1;
                                $parent->errors = json_encode($message);
                                $parent->update();
                            }
                        }
                    }

                    //No of Parent validation (if self is not present in sheet)
                    $noOfParentsAllowedInPolicy = $policyForValidation->max_parents;
                    $parentsCountInSheet = $parentsInSheet->count();

                    if ($parentsCountInSheet > $noOfParentsAllowedInPolicy) {
                        $count = 1;
                        foreach ($parentsInSheet as $parent) {
                            if ($count > $noOfParentsAllowedInPolicy) {
                                $message = ['Number of parents allowed into the policy limit reached.'];
                                $parent->has_errors = 1;
                                $parent->errors = json_encode($message);
                                $parent->update();
                            }
                            if (is_null($parent->has_errors)) {
                                $count++;
                            }
                        }
                    }
                }


                // Date of Marriage validation with self
                if ($relationId == RelationMaster::SPOUSE) {
                    $spouseDateOfMarriage = validDate($data->date_of_marriage);
                    if ($spouseDateOfMarriage) {
                        $employeePolicyRelation = EmployeePolicyRelation::where('policy_id', optional($policyForValidation)->id)
                            ->where('employee_id', $employeeExists?->id)->first();
                        if ($employeePolicyRelation) {
                            $selfDateOfMarriageData = $employeePolicyRelation->employeePolicyMembers->where('relation_id', 1)->first();
                            if ($selfDateOfMarriageData?->marriage_date) {
                                $selfMarriageDate = Carbon::parse($selfDateOfMarriageData->marriage_date)->toDate();
                                $spouseMarriageDate = Carbon::parse($spouseDateOfMarriage)->toDate();
                                if ($selfMarriageDate != $spouseMarriageDate) {
                                    $hasErrors = 1;
                                    array_push($errors, $messages['dom_should_same_as_employee']);
                                }
                            }
                        }
                    }
                }


                if (optional($employeeExistInDumpData)->has_errors == 1) {
                    $hasErrors = 1;
                    array_push($errors, $messages['employee_exist_with_error']);
                }

                //Insured Member DOB Validation
                if (!is_null($data->insured_member_dob)) {
                    if (!validDate($data->insured_member_dob)) {
                        $hasErrors = 1;
                        array_push($errors, trans('validation.invalid_date_format', ['attribute' => 'member dob']));
                    } else {
                        $data->insured_member_dob = validDate($data->insured_member_dob);
                    }
                } else {
                    $data->has_errors = 1;
                    $hasErrors = 1;
                    array_push($errors, trans('validation.field_required', ['attribute' => 'Member dob']));
                }

                //Insured Member Gender Validation
                if (!isset($data->insured_member_gender)) {
                    $data->has_errors = 1;
                    $hasErrors = 1;
                    array_push($errors, trans('validation.field_required', ['attribute' => 'Member gender']));
                }


                if (is_null($data->insured_member_first_name)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['member_first_name_required']);
                } else {
                    if (!preg_match($namePattern, $data->insured_member_first_name)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['invalid_member_first_name']);
                    }
                }

                if (!is_null($data->insured_member_email)) {
                    if (!preg_match($emailPattern, $data->insured_member_email)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['invalid_email_format']);
                    }
                }


                if (isset($data->insured_member_last_name)) $data->insured_member_last_name = trim($data->insured_member_last_name);
                if (isset($data->insured_member_last_name) || $data->insured_member_last_name != '') {
                    if (!preg_match($namePattern, $data->insured_member_last_name)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['invalid_member_last_name']);
                    }
                }
                if (!is_null($data->insured_member_state)) {
                    $stateExists = MasterState::where('state_name', $data->insured_member_state)->exists();
                    if (!$stateExists) {
                        $hasErrors = 1;
                        array_push($errors, $messages['invalid_state']);
                    }
                }


                if (!is_null($data->insured_member_mobile_number)) {
                    if (strlen($data->insured_member_mobile_number) != 10) {
                        $hasErrors = 1;
                        array_push($errors, $messages['member_incorrect_mobile_no_length']);
                    } elseif (!ctype_digit($data->insured_member_mobile_number)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['member_invalid_mobile_no']);
                    }
                }



                if (is_null($employeeExistInDumpData) && is_null($employeeExists)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['employee_does_not_exist']);
                } elseif (is_null($employeeExists)) {
                    if ($employeeExistInDumpData->has_errors == 1) {
                        $hasErrors = 1;
                        array_push($errors, $messages['employee_exist_with_error']);
                    }
                }

                if (
                    $ipdSuminsuredSubType == SuminsuredSubtypeMaster::RELATION_WISE_NUMBER_OF_TIME_SALARY || $opdSuminsuredSubType == SuminsuredSubtypeMaster::RELATION_WISE_NUMBER_OF_TIME_SALARY
                    || $ipdPremiumType == MasterPremium::RELATION_WISE_NUMBER_OF_TIME_SALARY_PERMILY_RATE || $opdPremiumType == MasterPremium::RELATION_WISE_NUMBER_OF_TIME_SALARY_PERMILY_RATE
                ) {
                    if (is_null($data->insured_member_number_of_time_salary)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['insured_member_number_of_time_salary_required']);
                    } else {
                        if ($relationData) {
                            $allowedNumberOfTimesInSalarySiArray = $policyRates->whereNull('relation_permilly')->where('relation_id', $relationData->id)->pluck('no_of_times_of_salary')->toArray();
                            $allowedNumberOfTimesInSalaryPremiumArray = $policyRates->whereNotNull('relation_permilly')->where('relation_id', $relationData->id)->pluck('no_of_times_of_salary')->toArray();
                            $allowedNumberOfTimesInSalaryArray = array_intersect($allowedNumberOfTimesInSalarySiArray, $allowedNumberOfTimesInSalaryPremiumArray);
                            if (!in_array($data->insured_member_number_of_time_salary, $allowedNumberOfTimesInSalaryArray)) {
                                $hasErrors = 1;
                                array_push($errors, 'Number of time salary ' . $data->insured_member_number_of_time_salary . ' is not configured for ' . $relationship);
                            }
                        }
                    }
                }

                if (($ipdPremiumType == MasterPremium::MEMBER_AGE || $opdPremiumType == MasterPremium::MEMBER_AGE) && $relationId != RelationMaster::SELF) {
                    if (is_null($data->insured_member_dob)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['member_dob_is_required']);
                    }
                }

                //Cover type validation is required
                if ($ipdSuminsuredType == SuminsuredTypeMaster::INDIVIDUAL_AND_FAMILY_COVER) {
                    if (is_null($data->cover_type)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['cover_type_is_required']);
                    } else {
                        if (!in_array($data->cover_type, ['Individual', 'Family Cover'])) {
                            $hasErrors = 1;
                            array_push($errors, $messages['invalid_cover_type']);
                        }
                    }
                }
            }


            if ($employeeExists) {

                $employeePolicyRelation = EmployeePolicyRelation::with('employeePolicyMembers')->where('policy_id', $this->policyId)->where('employee_id', optional($employeeExists)->id)->first();
                $employeePolicyMembers = optional($employeePolicyRelation)->employeePolicyMembers;

                if ($policyForValidation->has_parent_cross_selection == 0) {

                    $existingRelationIds = array();
                    if ($employeePolicyMembers)
                        $existingRelationIds = $employeePolicyMembers->pluck('relation_id')->toArray();

                    if ((in_array(RelationMaster::FATHER, $existingRelationIds) || in_array(RelationMaster::MOTHER, $existingRelationIds)) && in_array($relationId, RelationMaster::PARENTS_IN_LAW)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['parent_cross_selection_not_allowed']);
                    }

                    if ((in_array(RelationMaster::FATHER_IN_LAW, $existingRelationIds) || in_array(RelationMaster::MOTHER_IN_LAW, $existingRelationIds)) && in_array($relationId, RelationMaster::PARENTS)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['parent_cross_selection_not_allowed']);
                    }
                }

                if (!is_null($employeePolicyRelation)) {
                    $employeePolicyMemberCounts = $employeePolicyMembers->count();

                    if ($employeePolicyMemberCounts >= $policyForValidation->no_of_member) {
                        $hasErrors = 1;
                        array_push($errors, $messages['member_limit_reached']);
                    }

                    //Validation for Parents
                    if (in_array($relationId, RelationMaster::PARENTS_AND_PARENTS_IN_LAW)) {
                        $numberOfParentsAllowed = $policyForValidation->max_parents;
                        $employeeParentsCount = $employeePolicyMembers->whereIn('relation_id', RelationMaster::PARENTS_AND_PARENTS_IN_LAW)->count();
                        $dataParents = $dataDumpToProcess->where('employee_code', $data?->employee_code)->whereIn('relation_id', RelationMaster::PARENTS_AND_PARENTS_IN_LAW);
                        $dataParentsCount = $dataParents->count();
                        $checkDataParentCount = $employeeParentsCount;
                        foreach ($dataParents as $parent) {
                            if ($checkDataParentCount < $numberOfParentsAllowed) {
                                $checkDataParentCount++;
                            } else {
                                $parent->has_errors = 1;
                                $parent->is_validated = 1;
                                $parent->errors = [$messages['parents_limit_reached']];
                                $parent->update();
                            }
                        }
                        if ($employeeParentsCount >= $numberOfParentsAllowed && $data->is_validated == 0) {
                            $hasErrors = 1;
                            array_push($errors, $messages['parents_limit_reached']);
                        }
                    }
                }

                if ($relationId != RelationMaster::SELF) {
                    //Parent & Child Age Validation
                    $employeeDob = $employeeExists->dob;
                    if ($ipdPremiumType == MasterPremium::EMPLOYEE_AGE_BAND_WITH_CONSTRUCT || $opdPremiumType == MasterPremium::EMPLOYEE_AGE_BAND_WITH_CONSTRUCT) {
                        $data->employee_dob = $employeeExists->dob;
                        $data->update();
                    }

                    if (!is_null($employeeDob) && validDate($data->insured_member_dob) && $ageDetail) {
                        $parsedEmployeeDob = Carbon::parse($employeeDob);
                        $parsedMemberDob = Carbon::parse($data->insured_member_dob);

                        //If age difference set in policy configuration
                        if (in_array($relationData->id, RelationMaster::CHILDRENS) && $parsedMemberDob->lte($parsedEmployeeDob)) {
                            $hasErrors = 1;
                            array_push($errors, $messages['child_age_must_be_less_than_employee_age']);
                        } elseif (in_array($relationData->id, RelationMaster::PARENTS) && $parsedMemberDob->gte($parsedEmployeeDob)) {
                            $hasErrors = 1;
                            array_push($errors, $messages['parent_age_must_be_greater_than_employee_age']);
                        } elseif (in_array($relationData->id, RelationMaster::PARENTS_IN_LAW) && $parsedMemberDob->gte($parsedEmployeeDob)) {
                            $hasErrors = 1;
                            array_push($errors, $messages['parent_in_law_age_must_be_greater_than_employee_age']);
                        } else {
                            if (!is_null($ageDetail->age_difference)) {
                                if ($ageDetail->difference_from_relation == RelationMaster::SELF) {
                                    if ($parsedMemberDob->diffInYears($parsedEmployeeDob) < $ageDetail->age_difference) {
                                        $hasErrors = 1;
                                        array_push($errors, 'employee and ' . $relationship . ' age difference must be ' . $ageDetail->age_difference . ' years.');
                                    }
                                } elseif ($ageDetail->difference_from_relation == RelationMaster::SPOUSE) {
                                    $spouseExists = $employeePolicyRelation ? $employeePolicyMembers->where('relation_id', RelationMaster::SPOUSE)->first() : NULL;
                                    if ($spouseExists) {
                                        $parsedSpouseDob = Carbon::parse($spouseExists->dob);
                                        if ($parsedMemberDob->diffInYears($parsedSpouseDob) < $ageDetail->age_difference && !is_null($spouseExists->dob)) {
                                            $hasErrors = 1;
                                            array_push($errors, 'spouse and ' . $relationship . ' age difference must be ' . $ageDetail->age_difference . ' years.');
                                        }
                                    }
                                }
                            } else {
                                if ((!$relationData->id == RelationMaster::SPOUSE) && ($parsedMemberDob->diffInYears($parsedEmployeeDob) < 18)) {
                                    $hasErrors = 1;
                                    array_push($errors, 'employee and ' . $relationship . ' age difference must be 18 years.');
                                }
                            }
                        }

                        $today = today();
                        if (in_array($relationId, RelationMaster::ADULTS) && is_null($ageDetail->min_age) && is_null($ageDetail->max_age)) {
                            if ($relationId == RelationMaster::SELF) {
                                if ($parsedEmployeeDob->diffInYears($today) < 18) {
                                    $hasErrors = 1;
                                    array_push($errors, $messages['age_must_be_18_years']);
                                }
                            } else {
                                if ($parsedMemberDob->diffInYears($today) < 18) {
                                    $hasErrors = 1;
                                    array_push($errors, $messages['age_must_be_18_years']);
                                }
                            }
                        }
                    }


                    //Parent and Parents in law validation based on employee gender
                    $employeeGender = $employeeExists->gender;

                    if ($ageDetail) {
                        if ($ageDetail->is_allowed_for_gender === 0 && $employeeGender == 'Female') {
                            $hasErrors = 1;
                            array_push($errors, $relationship . ' is not allowed for ' . $employeeGender . ' employee.');
                        } elseif ($ageDetail->is_allowed_for_gender == 1 && $employeeGender == 'Male') {
                            $hasErrors = 1;
                            array_push($errors, $relationship . ' is not allowed for ' . $employeeGender . ' employee.');
                        }
                    }


                    //Employee Coverage (policy lock in) validation
                    $employeeId = $employeeExists->id;
                    $coverage = EmployeeCoverage::where('employee_id', $employeeId)->where('type_id', 1)->where('relation_id', $relationData?->id)->first();
                    $coverageDetails = EmployeeCoverageDetail::where('policy_id', $policyForValidation->id)->where('employee_coverage_id', $coverage?->id)->first();
                    if ($coverageDetails) {
                        if (in_array($coverageDetails->is_mandatory, ['No', 'N', 'no', 'n'])) {
                            $hasErrors = 1;
                            array_push($errors, $relationship . ' is not allowed for employee.');
                        }
                    }
                }
            }

            //6 . Is valid IPD suminsured.
            if ($whenPolicyIsIpd && $ipdSuminsuredSubType == SuminsuredSubtypeMaster::FLAT) {
                if ($ipdSuminsuredType == SuminsuredTypeMaster::INDIVIDUAL) {
                    if (!is_null($data->suminsured)) {
                        $siExists = $policyRates->whereNotNull('flat_suminsured')->where('flat_suminsured', $data->suminsured)->first();
                        if (!$siExists) {
                            $hasErrors = 1;
                            array_push($errors, $messages['is_valid_ipd_sum_insured']);
                        }
                    } else {
                        $hasErrors = 1;
                        array_push($errors, $messages['suminsured_is_missing']);
                    }
                } else {
                    if ($relationId == RelationMaster::SELF) {
                        if (!is_null($data->suminsured)) {
                            $siExists = $policyRates->whereNotNull('flat_suminsured')->where('flat_suminsured', $data->suminsured)->first();
                            if (!$siExists) {
                                $hasErrors = 1;
                                array_push($errors, $messages['is_valid_ipd_sum_insured']);
                            }
                        } else {
                            $hasErrors = 1;
                            array_push($errors, $messages['suminsured_is_missing']);
                        }
                    }
                }
            }


            //Suminsured & premium validation for  NO RULE rater
            if ($whenPolicyIsIpd && $ipdSuminsuredSubType == SuminsuredSubtypeMaster::NO_RULE) {
                if ($ipdSuminsuredType == SuminsuredTypeMaster::INDIVIDUAL) {
                    if (is_null($data->suminsured)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['suminsured_is_missing']);
                    }
                } else {
                    if ($relationId == RelationMaster::SELF) {
                        if (is_null($data->suminsured)) {
                            $hasErrors = 1;
                            array_push($errors, $messages['suminsured_is_missing']);
                        }
                    }
                }
            }

            //7. Is valid OPD sum insured
            if ($whenPolicyIsOpd && $opdSuminsuredSubType == SuminsuredSubtypeMaster::FLAT) {
                if ($opdSuminsuredType == SuminsuredTypeMaster::INDIVIDUAL) {
                    if (!is_null($data->opd_suminsured)) {
                        $siExists = $policyRates->whereNotNull('flat_suminsured')->where('flat_suminsured', $data->opd_suminsured)->where('is_opd_rate', 1)->first();
                        if (!$siExists) {
                            $hasErrors = 1;
                            array_push($errors, $messages['is_valid_opd_suminsured']);
                        }
                    } else {
                        $hasErrors = 1;
                        array_push($errors, $messages['opd_suminsured_is_missing']);
                    }
                } else {
                    if ($relationId == RelationMaster::SELF) {
                        if (!is_null($data->opd_suminsured)) {
                            $siExists = $policyRates->whereNotNull('flat_suminsured')->where('flat_suminsured', $data->opd_suminsured)->where('is_opd_rate', 1)->first();
                            if (!$siExists) {
                                $hasErrors = 1;
                                array_push($errors, $messages['is_valid_opd_suminsured']);
                            }
                        } else {
                            $hasErrors = 1;
                            array_push($errors, $messages['opd_suminsured_is_missing']);
                        }
                    }
                }
            }

            // Is valid IPD suminsured for No Of Time Suminsured.
            if ($whenPolicyIsIpd && $ipdSuminsuredSubType == SuminsuredSubtypeMaster::NUMBER_OF_TIME_SUMINSURED) {
                if ($ipdSuminsuredType == SuminsuredTypeMaster::INDIVIDUAL) {
                    if (!is_null($data->suminsured)) {
                        $siExists = $policyRates->whereNotNull('flat_suminsured')->where('flat_suminsured', $data->suminsured)->first();
                        if (!$siExists) {
                            $hasErrors = 1;
                            array_push($errors, $messages['is_valid_ipd_sum_insured']);
                        }
                    } else {
                        $hasErrors = 1;
                        array_push($errors, $messages['suminsured_is_missing']);
                    }
                } else {
                    if ($relationId == RelationMaster::SELF) {
                        if (!is_null($data->suminsured)) {
                            $siExists = $policyRates->whereNotNull('flat_suminsured')->where('flat_suminsured', $data->suminsured)->first();
                            if (!$siExists) {
                                $hasErrors = 1;
                                array_push($errors, $messages['is_valid_ipd_sum_insured']);
                            }
                        } else {
                            $hasErrors = 1;
                            array_push($errors, $messages['suminsured_is_missing']);
                        }
                    }
                }

                if (is_null($data->employee_no_of_time_suminsured)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['employee_number_of_time_suminsured_required']);
                }

                if (!is_null($data->employee_no_of_time_suminsured)) {
                    $ratesFound = $policyRates->where('policy_id', $policyForValidation->policy_id)->whereNotNull('flat_suminsured')->where('flat_suminsured', $data->suminsured)->where('no_of_time_suminsured', $data->employee_no_of_time_suminsured)->where('is_opd_rate', 0)->exists();
                    if (!$ratesFound) {
                        $hasErrors = 1;
                        array_push($errors, $messages['invalid_no_of_time_suminsured']);
                    }
                }
            }

            if ($whenPolicyIsOpd && $opdSuminsuredSubType == SuminsuredSubtypeMaster::NUMBER_OF_TIME_SUMINSURED) {
                if ($opdSuminsuredType == SuminsuredTypeMaster::INDIVIDUAL) {
                    if (!is_null($data->opd_suminsured)) {
                        $siExists = $policyRates->whereNotNull('flat_suminsured')->where('flat_suminsured', $data->opd_suminsured)->where('is_opd_rate', 1)->first();
                        if (!$siExists) {
                            $hasErrors = 1;
                            array_push($errors, $messages['is_valid_opd_suminsured']);
                        }
                    } else {
                        $hasErrors = 1;
                        array_push($errors, $messages['opd_suminsured_is_missing']);
                    }
                } else {
                    if ($relationId == RelationMaster::SELF) {
                        if (!is_null($data->opd_suminsured)) {
                            $siExists = $policyRates->whereNotNull('flat_suminsured')->where('flat_suminsured', $data->opd_suminsured)->where('is_opd_rate', 1)->first();
                            if (!$siExists) {
                                $hasErrors = 1;
                                array_push($errors, $messages['is_valid_opd_suminsured']);
                            }
                        } else {
                            $hasErrors = 1;
                            array_push($errors, $messages['opd_suminsured_is_missing']);
                        }
                    }
                }

                if (is_null($data->employee_no_of_time_suminsured)) {
                    $hasErrors = 1;
                    array_push($errors, $messages['employee_number_of_time_suminsured_required']);
                }

                if (!is_null($data->employee_no_of_time_suminsured)) {
                    $ratesFound = $policyRates->where('policy_id', $policyForValidation->policy_id)->whereNotNull('flat_suminsured')->where('flat_suminsured', $data->suminsured)->where('no_of_time_suminsured', $data->employee_no_of_time_suminsured)->where('is_opd_rate', 1)->exists();
                    if (!$ratesFound) {
                        $hasErrors = 1;
                        array_push($errors, $messages['invalid_no_of_time_suminsured']);
                    }
                }
            }


            //Opd Suminsured & opd premium validation for  NO RULE rater
            if ($whenPolicyIsOpd && $opdSuminsuredSubType == SuminsuredSubtypeMaster::NO_RULE) {
                if ($policyForValidation->opd_suminsured_type == SuminsuredTypeMaster::INDIVIDUAL) {
                    if (is_null($data->opd_suminsured)) {
                        $hasErrors = 1;
                        array_push($errors, $messages['opd_suminsured_is_missing']);
                    }
                } else {
                    if ($relationId == RelationMaster::SELF) {
                        if (is_null($data->opd_suminsured)) {
                            $hasErrors = 1;
                            array_push($errors, $messages['opd_suminsured_is_missing']);
                        }
                    }
                }
            }

            $isValidAge = 'YES';

            //8 . Age Validations based policy age construct.
            if ($ageDetail) {

                if (!is_null($ageDetail) && ($relationData->id != RelationMaster::SPOUSE && $relationData->id != RelationMaster::SON && $relationData->id != RelationMaster::DAUGHTER)) {
                    if ($employeeExists) {
                        $employeePolicyRelation = EmployeePolicyRelation::where('policy_id', optional($policyForValidation)->id)
                            ->where('employee_id', $employeeExists->id)->first();
                        if ($employeePolicyRelation) {
                            $employeePolicySpouseMemberCounts = EmployeeMembers::where('employee_policy_mapping_id', $employeePolicyRelation->id)->where('relation_id', $relationData->id)->count();
                            $noOfrelation = is_null($ageDetail->no_of_relation) ? 1 : $ageDetail->no_of_relation;
                            if ($employeePolicySpouseMemberCounts >= $noOfrelation) {
                                $hasErrors = 1;
                                array_push($errors, $messages['employee_member_already_exists']);
                            }
                        }
                    }
                }

                if (!is_null($ageDetail) && $relationId == RelationMaster::SPOUSE) {
                    if ($employeeExists) {
                        $employeePolicyRelation = EmployeePolicyRelation::where('policy_id', optional($policyForValidation)->id)
                            ->where('employee_id', $employeeExists->id)->first();
                        if ($employeePolicyRelation) {
                            $employeePolicySpouseMemberCounts = EmployeeMembers::where('employee_policy_mapping_id', $employeePolicyRelation->id)->where('relation_id', RelationMaster::SPOUSE)->count();
                            $noOfrelation = is_null($ageDetail->no_of_relation) ? 1 : $ageDetail->no_of_relation;
                            $dataSpouse = $dataDumpToProcess->where('employee_code', $data?->employee_code)->where('relation_id', RelationMaster::SPOUSE);
                            $dataSpouseCount = $dataSpouse->count();
                            $checkSpouseCount = $employeePolicySpouseMemberCounts;
                            foreach ($dataSpouse as $spouse) {
                                if ($checkSpouseCount < $noOfrelation) {
                                    $checkSpouseCount++;
                                } else {
                                    $spouse->has_errors = 1;
                                    $spouse->is_validated = 1;
                                    $spouse->errors = [$messages['spouse_limit_reached']];
                                    $spouse->update();
                                }
                            }
                            if ($employeePolicySpouseMemberCounts >= $noOfrelation && $data->is_validated == 0) {
                                $hasErrors = 1;
                                array_push($errors, $messages['spouse_limit_reached']);
                            }
                        }
                    }
                }

                if (!is_null($ageDetail) && $relationId == RelationMaster::PARTNER) {
                    if ($employeeExists) {
                        $employeePolicyRelation = EmployeePolicyRelation::where('policy_id', optional($policyForValidation)->id)
                            ->where('employee_id', $employeeExists->id)->first();
                        if ($employeePolicyRelation) {
                            $employeePolicySpouseMemberCounts = EmployeeMembers::where('employee_policy_mapping_id', $employeePolicyRelation->id)->where('relation_id', RelationMaster::PARTNER)->count();
                            $noOfrelation = is_null($ageDetail->no_of_relation) ? 1 : $ageDetail->no_of_relation;
                            $dataPartner = $dataDumpToProcess->where('employee_code', $data?->employee_code)->where('relation_id', RelationMaster::PARTNER);
                            $dataPartnerCount = $dataPartner->count();
                            $checkPartnerCount = $employeePolicySpouseMemberCounts;
                            foreach ($dataPartner as $partner) {
                                if ($checkPartnerCount < $noOfrelation) {
                                    $checkPartnerCount++;
                                } else {
                                    $partner->has_errors = 1;
                                    $partner->is_validated = 1;
                                    $partner->errors = [$messages['partner_limit_reached']];
                                    $partner->update();
                                }
                            }
                            if ($employeePolicySpouseMemberCounts >= $noOfrelation && $data->is_validated == 0) {
                                $hasErrors = 1;
                                array_push($errors, $messages['partner_limit_reached']);
                            }
                        }
                    }
                }



                if (!is_null($ageDetail) && in_array($relationData->id, RelationMaster::CHILDRENS)) {
                    if ($employeeExists) {
                        $employeePolicyRelation = EmployeePolicyRelation::where('policy_id', optional($policyForValidation)->id)
                            ->where('employee_id', $employeeExists->id)->first();
                        if ($employeePolicyRelation) {
                            $employeePolicyMemberCounts = EmployeeMembers::where('employee_policy_mapping_id', $employeePolicyRelation->id)
                                ->whereIn('relation_id', RelationMaster::CHILDRENS)->count();
                            $dataChildren = $dataDumpToProcess->where('employee_code', $data?->employee_code)->whereIn('relation_id', RelationMaster::CHILDRENS);
                            $dataChildrenCount = $dataChildren->count();
                            $checkPartnerCount = $employeePolicyMemberCounts;
                            foreach ($dataChildren as $children) {
                                if ($checkPartnerCount < $policyForValidation->max_child) {
                                    $checkPartnerCount++;
                                } else {
                                    $children->has_errors = 1;
                                    $children->is_validated = 1;
                                    $children->errors = [$messages['children_limit_reached']];
                                    $children->update();
                                }
                            }
                            if ($employeePolicyMemberCounts >= $policyForValidation->max_child && $data->is_validated == 0) {
                                $hasErrors = 1;
                                array_push($errors, $messages['children_limit_reached']);
                            }
                        }
                    }
                }

                /**Siblings Valiadation */

                if ((!is_null($policyForValidation->no_of_siblings) && $policyForValidation->no_of_siblings > 0) && $relationData->id > 9) {
                    if ($employeeExists) {
                        $employeePolicyRelation = EmployeePolicyRelation::where('policy_id', optional($policyForValidation)->id)
                            ->where('employee_id', $employeeExists->id)->first();
                        if ($employeePolicyRelation) {
                            $employeePolicySiblingMemberCount = EmployeeMembers::where('employee_policy_mapping_id', $employeePolicyRelation->id)
                                ->where('relation_id', RelationMaster::SIBLINGS)->count();
                            $dataSibling = $dataDumpToProcess->where('employee_code', $data?->employee_code)->whereIn('relation_id', RelationMaster::SIBLINGS);
                            $dataSiblingCount = $dataSibling->count();
                            $checkSiblingCount = $employeePolicySiblingMemberCount;
                            foreach ($dataSibling as $sibling) {
                                if ($checkSiblingCount < $policyForValidation->no_of_siblings) {
                                    $checkSiblingCount++;
                                } else {
                                    $sibling->has_errors = 1;
                                    $sibling->is_validated = 1;
                                    $sibling->errors = [$messages['siblings_limit_reached']];
                                    $sibling->update();
                                }
                            }
                            if ($employeePolicySiblingMemberCount >= $policyForValidation->no_of_siblings && $data->is_validation == 0) {
                                $hasErrors = 1;
                                array_push($errors, $messages['siblings_limit_reached']);
                            }
                        }
                    }
                }

                $date = NULL;
                if (isset($data->employee_dob) || isset($data->insured_member_dob)) {
                    if ($relationData->id == Relation::SELF) {
                        $date = $data->employee_dob;
                    }

                    if ($relationData->id > 1) {
                        if (isset($data->insured_member_dob)) {
                            $date = $data->insured_member_dob;
                        } elseif (isset($data->employee_dob)) {
                            $date = $data->employee_dob;
                        }
                    }
                    if (validDate($date)) {

                        try {
                            $currentMemberDOB = Carbon::parse($date);
                            $isFutureDate = $currentMemberDOB->gt(today()->toDate());
                            if ($isFutureDate) {
                                $hasErrors = 1;
                                array_push($errors, $messages['future_date_message']);
                            }

                            if (validDate($data->employee_date_of_joining) && $policyForValidation->start_date) {
                                $parsedPolicyStartDate = Carbon::parse($policyForValidation->start_date);
                                $parsedemployeeDOJ = Carbon::parse(validDate($data->employee_date_of_joining));
                                if ($parsedPolicyStartDate > $parsedemployeeDOJ) {
                                    $empCoverStartDate = $parsedPolicyStartDate;
                                } else {
                                    $empCoverStartDate = $parsedemployeeDOJ;
                                }
                            }

                            if (@$empCoverStartDate) {
                                $currentMemberAge = $currentMemberDOB->diffInYears($empCoverStartDate);
                            } else {
                                $currentMemberAge = $currentMemberDOB->diffInYears(Carbon::today());
                            }
                        } catch (Exception $e) {
                            $currentMemberAge = 0;
                        }



                        if (isset($ageDetail) && !$isFutureDate) {

                            //Continuation Age Validation
                            $continuationAgeEligible = false;
                            if ($ageDetail?->continuation_age) {
                                $continuationAge = $ageDetail->continuation_age;
                                if ($continuationAge > $ageDetail->max_age && $employeeExists) {

                                    $policySubType = $policyForValidation->policy_sub_type_id;

                                    $existsInPreviousPolicy = EmployeePolicyRelation::join('master_policies', 'master_policies.id', '=', 'employee_policy_relation.policy_id')
                                        ->join('employee_members', 'employee_members.employee_policy_mapping_id', '=', 'employee_policy_relation.id')
                                        ->where('employee_policy_relation.employee_id', $employeeExists?->id)
                                        ->where('master_policies.policy_sub_type_id', $policySubType)
                                        ->where('master_policies.id', '<', $policyForValidation?->id)
                                        ->where('employee_members.relation_id', $relationId)
                                        ->exists();

                                    if ($existsInPreviousPolicy) {
                                        $continuationAgeEligible = true;
                                    }
                                }
                            }

                            if ($continuationAgeEligible) {
                                if (!is_null($ageDetail->min_age) && !is_null($ageDetail->continuation_age)) {
                                    if ($currentMemberAge < $ageDetail->min_age) {
                                        $hasErrors = 1;
                                        $messages['age_construct_message'] = 'Member age should be in the range of ' . $ageDetail->min_age . '-' . $ageDetail->continuation_age;
                                        array_push($errors, $messages['age_construct_message']);
                                    }
                                    if ($currentMemberAge > $ageDetail->continuation_age) {
                                        $hasErrors = 1;
                                        $messages['age_construct_message'] = 'Member age should be in the range of ' . $ageDetail->min_age . '-' . $ageDetail->continuation_age;
                                        array_push($errors, $messages['age_construct_message']);
                                    }
                                }
                            } else {
                                if (!is_null($ageDetail->min_age) && !is_null($ageDetail->max_age)) {
                                    if ($currentMemberAge < $ageDetail->min_age) {
                                        $hasErrors = 1;
                                        $messages['age_construct_message'] = 'Member age should be in the range of ' . $ageDetail->min_age . '-' . $ageDetail->max_age;
                                        array_push($errors, $messages['age_construct_message']);
                                    }
                                    if ($currentMemberAge > $ageDetail->max_age) {
                                        $hasErrors = 1;
                                        $messages['age_construct_message'] = 'Member age should be in the range of ' . $ageDetail->min_age . '-' . $ageDetail->max_age;
                                        array_push($errors, $messages['age_construct_message']);
                                    }
                                }
                            }
                        }

                        if (($whenPolicyIsIpd || $policyForValidation->policy_rater_type_id == 5) && !in_array($messages['future_date_message'], $messages)) {
                            if ($ipdSuminsuredSubType == 2) {
                                $ipdPolicyCoverRateForValidation = $policyRates->whereNotNull('age')->whereNotNull('age_suminsured')->where('is_opd_rate', 0);

                                $ipdCover = $ipdPolicyCoverRateForValidation?->filter(fn ($query) => $currentMemberAge >= explode("-", $query->age)[0] && $currentMemberAge <= explode("-", $query->age)[1]);

                                if (is_null($ipdCover->first())) {
                                    $hasErrors = 1;
                                    $messages['cover_not_found_for_age'] = 'Cover Amount Not found for this age';
                                    array_push($errors, $messages['cover_not_found_for_age']);
                                }
                            }
                            if ($ipdPremiumType == 2 || $ipdPremiumType == 8) {
                                $ipdPolicyPremiumRateForValidation = $policyRates->whereNotNull('age')->whereNotNull('age_suminsured')->whereNotNull('total_premium')->where('is_opd_rate', 0);

                                $ipdPremiumRate = $ipdPolicyPremiumRateForValidation?->filter(fn ($query) => $currentMemberAge >= explode("-", $query->age)[0] && $currentMemberAge <= explode("-", $query->age)[1]);

                                if (is_null($ipdPremiumRate->first())) {
                                    $isValidAge = 'NO';
                                    $messages['premium_not_found_for_age'] = 'Premium Amount Not found for this age';
                                    array_push($errors, $messages['premium_not_found_for_age']);
                                }
                            }
                        }

                        if (($whenPolicyIsOpd || $policyForValidation->policy_rater_type_id == 5) && $isValidAge == 'YES') {
                            if ($opdSuminsuredSubType == 2) {
                                $opdPolicyCoverRateForValidation = $policyRates->whereNotNull('age')->whereNotNull('age_suminsured')->where('is_opd_rate', 1);

                                $opdCover = $opdPolicyCoverRateForValidation?->filter(fn ($query) => $currentMemberAge >= explode("-", $query->age)[0] && $currentMemberAge <= explode("-", $query->age)[1]);

                                if (is_null($opdCover->first())) {
                                    $hasErrors = 1;
                                    $messages['cover_not_found_for_age'] = 'OPD Cover Amount Not found for this age';
                                    array_push($errors, $messages['cover_not_found_for_age']);
                                }
                            }

                            if ($opdPremiumType == 2 || $opdPremiumType == 8) {
                                $opdPolicyPremiumRateForValidation = $policyRates->whereNotNull('age')->whereNotNull('age_suminsured')->whereNotNull('total_premium')->where('is_opd_rate', 1);

                                $opdPremiumRate = $opdPolicyPremiumRateForValidation?->filter(fn ($query) => $currentMemberAge >= explode("-", $query->age)[0] && $currentMemberAge <= explode("-", $query->age)[1]);

                                if (is_null($opdPremiumRate->first())) {
                                    $isValidAge = 'NO';
                                    $messages['premium_not_found_for_age'] = 'OPD Premium Amount Not found for this age';
                                    array_push($errors, $messages['premium_not_found_for_age']);
                                }
                            }
                        }
                    }
                }

                //Validation for Duplicate Member (Child & Spouse)
                if ($employeeExists && $relationData->id == RelationMaster::SPOUSE || $relationData->id == RelationMaster::PARTNER || $relationData->id == RelationMaster::SON || $relationData->id == RelationMaster::DAUGHTER) {
                    $firstName = $data->insured_member_first_name;
                    $lastName = $data->insured_member_last_name;
                    $dob = validDate($data->insured_member_dob) ? Carbon::parse($data->insured_member_dob)->toDateString() : NULL;

                    $employeePolicyRelation = EmployeePolicyRelation::where('policy_id', optional($policyForValidation)->id)
                        ->where('employee_id', $employeeExists?->id)->first();
                    $isDuplicateEmployeeMember = EmployeeMembers::where('employee_policy_mapping_id', optional($employeePolicyRelation)->id)
                        ->where('relation_id', $relationData?->id)
                        ->where('dob', $dob)
                        ->where('first_name', $firstName)
                        ->where('last_name', $lastName)
                        ->exists();

                    if ($isDuplicateEmployeeMember) {
                        if ($relationData->id == RelationMaster::SPOUSE) {
                            $hasErrors = 1;
                            array_push($errors, $messages['duplicate_spouse']);
                        } elseif ($relationData->id == RelationMaster::PARTNER) {
                            $hasErrors = 1;
                            array_push($errors, $messages['duplicate_partner']);
                        } else {
                            $hasErrors = 1;
                            array_push($errors, $messages['duplicate_child']);
                        }
                    }
                }
            }


            //10 . Setting available employee Data.
            $allEmployeeData = $dataDumpToProcess->where('relationship_with_employee', 'Self');
            $selfNotFoundInSheet = 0;
            if ($allEmployeeData->isNotEmpty()) {
                if (isset($relationId)) {
                    if ($relationId != RelationMaster::SELF) {
                        if (isset($data->employee_code)) {
                            $employeeData = $allEmployeeData->where('employee_code', $data->employee_code)->first();
                            if ($employeeData) {
                                $data->employee_email = $employeeData->employee_email;
                                if (validDate($employeeData->employee_date_of_joining)) {
                                    $data->employee_date_of_joining = validDate($employeeData->employee_date_of_joining) ? Carbon::parse($employeeData->employee_date_of_joining)->format('d-m-Y') : NULL;
                                }
                                if ($ipdPremiumType == MasterPremium::EMPLOYEE_AGE || $opdPremiumType == MasterPremium::EMPLOYEE_AGE || $ipdPremiumType == MasterPremium::EMPLOYEE_AGE_BAND_WITH_CONSTRUCT || $opdPremiumType == MasterPremium::EMPLOYEE_AGE_BAND_WITH_CONSTRUCT) {
                                    $data->employee_dob = validDate($employeeData->employee_dob) ? Carbon::parse($employeeData->employee_dob)->format('d-m-Y') : NULL;
                                }
                                if (in_array($ipdSuminsuredSubType, SuminsuredSubtypeMaster::GRADE_RATERS) || in_array($opdSuminsuredSubType, SuminsuredSubtypeMaster::GRADE_RATERS) || in_array($ipdPremiumType, MasterPremium::GRADE_RATERS) || in_array($opdPremiumType, MasterPremium::GRADE_RATERS)) {
                                    $data->employee_grade = $employeeData->employee_grade;
                                }
                                if (in_array($ipdSuminsuredSubType, SuminsuredSubtypeMaster::DESIGNATION_RATERS) || in_array($opdSuminsuredSubType, SuminsuredSubtypeMaster::DESIGNATION_RATERS) || in_array($ipdPremiumType, MasterPremium::DESIGNATION_RATERS) || in_array($opdPremiumType, MasterPremium::DESIGNATION_RATERS)) {
                                    $data->employee_designation = $employeeData->employee_designation;
                                }
                                if (
                                    $ipdSuminsuredSubType == SuminsuredSubtypeMaster::NUMBER_OF_TIME_SALARY || $opdSuminsuredSubType == SuminsuredSubtypeMaster::NUMBER_OF_TIME_SALARY || $ipdSuminsuredSubType == SuminsuredSubtypeMaster::RELATION_WISE_NUMBER_OF_TIME_SALARY || $ipdPremiumType == 17 || $opdPremiumType == 17 ||
                                    $opdSuminsuredSubType == SuminsuredSubtypeMaster::RELATION_WISE_NUMBER_OF_TIME_SALARY || $ipdSuminsuredSubType == SuminsuredSubtypeMaster::GRADE_WISE_NUMBER_OF_TIME_SALARY || $opdSuminsuredSubType == SuminsuredSubtypeMaster::GRADE_WISE_NUMBER_OF_TIME_SALARY
                                ) {
                                    if (isset($employeeData->employee_number_of_time_salary)) {
                                        $data->employee_number_of_time_salary = $employeeData->employee_number_of_time_salary;
                                    }
                                    if (isset($employeeData->employee_annual_salary)) {
                                        $data->employee_annual_salary = $employeeData->employee_annual_salary;
                                    }
                                    if (isset($employeeData->employee_variables_in_salary)) {
                                        $data->employee_variables_in_salary = $employeeData->employee_variables_in_salary;
                                    }
                                }
                                if ($ipdSuminsuredSubType == SuminsuredSubtypeMaster::STATE_WISE || $ipdPremiumType == MasterPremium::STATE_WISE || $opdSuminsuredSubType == SuminsuredSubtypeMaster::STATE_WISE || $opdPremiumType == MasterPremium::STATE_WISE || isset($employeeData->employee_state)) {
                                    $data->employee_state = $employeeData->employee_state;
                                }

                                if ($ipdSuminsuredSubType == SuminsuredSubtypeMaster::GDAC || $opdSuminsuredSubType == SuminsuredSubtypeMaster::GDAC || $ipdPremiumType == MasterPremium::GDAC || $opdPremiumType == MasterPremium::GDAC) {
                                    $data->employee_grade = $employeeData->employee_grade;
                                    $data->employee_designation = $employeeData->employee_designation;
                                    $data->employee_dob = validDate($employeeData->employee_dob) ? Carbon::parse($employeeData->employee_dob)->format('d-m-Y') : NULL;
                                }


                                if (($ipdSuminsuredType == 2 || !isset($data['suminsured'])) && isset($employeeData->suminsured)) {
                                    if ($ipdSuminsuredSubType != 17) {
                                        $data->suminsured = $employeeData->suminsured;
                                    }
                                }
                            } else {
                                $selfNotFoundInSheet = 1;
                            }
                        }
                    }
                }
            }
            if (($allEmployeeData->isEmpty() || $selfNotFoundInSheet)) {
                if ($relationId != RelationMaster::SELF) {
                    if (isset($data->employer_name)) {
                        $employerChildIds = EmployerChildCompanies::where('employer_id', $employerId)->pluck('child_employer_id')->toArray();
                        array_push($employerChildIds, $employerId);
                        $employeeData = MasterEmployee::with('user', 'grade', 'designation', 'state')->where('code', $data->employee_code)->whereIn('employer_id', $employerChildIds)->first();
                    } else {
                        $employeeData = MasterEmployee::with('user', 'grade', 'designation', 'state')->where('code', $data->employee_code)->where('employer_id', $employerId)->first();
                    }
                    if (@$employeeData) {
                        $data->employee_email = $employeeData->user->email;
                        $data->employee_date_of_joining = Carbon::parse($employeeData->doj)->format('d-m-Y');
                        if (in_array(isset($employeeData->employee_grade) || $ipdSuminsuredSubType, SuminsuredSubtypeMaster::GRADE_RATERS) || in_array($opdSuminsuredSubType, SuminsuredSubtypeMaster::GRADE_RATERS) || in_array($ipdPremiumType, MasterPremium::GRADE_RATERS) || in_array($opdPremiumType, MasterPremium::GRADE_RATERS)) {
                            $data->employee_grade = $employeeData->grade ? $employeeData->grade->grade : $data->employee_grade;
                        }
                        if (isset($employeeData->employee_designation) || in_array($ipdSuminsuredSubType, SuminsuredSubtypeMaster::DESIGNATION_RATERS) || in_array($opdSuminsuredSubType, SuminsuredSubtypeMaster::DESIGNATION_RATERS) || in_array($ipdPremiumType, MasterPremium::DESIGNATION_RATERS) || in_array($opdPremiumType, MasterPremium::DESIGNATION_RATERS)) {
                            $data->employee_designation = $employeeData->designation ? $employeeData->designation->name : $data->employee_designation;
                        }
                        if ($ipdSuminsuredSubType == SuminsuredSubtypeMaster::STATE_WISE || $ipdPremiumType == MasterPremium::STATE_WISE || $opdSuminsuredSubType == SuminsuredSubtypeMaster::STATE_WISE || $opdPremiumType == MasterPremium::STATE_WISE) {
                            $data->employee_state = $employeeData->state ? $employeeData->state->state_name : $data->employee_state;
                        }
                        if (($ipdSuminsuredType == 2 || !isset($data['suminsured'])) && isset($employeeData->suminsured)) {
                            if ($ipdSuminsuredSubType != 17) {
                                $data->suminsured = $employeeData->suminsured;
                            }
                        }

                        if ($ipdSuminsuredSubType == SuminsuredSubtypeMaster::GDAC || $opdSuminsuredSubType == SuminsuredSubtypeMaster::GDAC || $ipdPremiumType == MasterPremium::GDAC || $opdPremiumType == MasterPremium::GDAC) {
                            $data->employee_designation = $employeeData->designation ? $employeeData->designation->name : $data->employee_designation;
                            $data->employee_grade = $employeeData->grade ? $employeeData->grade->grade : $data->employee_grade;
                            $data->employee_dob = validDate($employeeData->dob) ? Carbon::parse($employeeData->dob)->format('d-m-Y') : NULL;
                        }


                        if ($ipdPremiumType == 2 || $opdPremiumType == 2) {
                            $data->employee_dob = validDate($employeeData->dob) ? Carbon::parse($employeeData->dob)->format('d-m-Y') : NULL;
                        }
                    }
                }
            }

            //Sheet validation
            if ($relationId == RelationMaster::SELF) {
                //Family Construct and Grade with construct validation.

                $employeeDataIntoDump = $dataDumpToProcess->where('employee_code', '===', $data->employee_code);

                //Parent Cross Selection Validation in sheet
                if ($policyForValidation->has_parent_cross_selection == 0) {

                    $parentExistInEmployeeDataCount = $employeeDataIntoDump->whereIn('relationship_with_employee', ['Father', 'Mother'])->count();
                    $parentInLawExistInEmployeeDataCount = $employeeDataIntoDump->whereIn('relationship_with_employee', ['Father-in-law', 'Mother-in-law'])->count();

                    if ($parentExistInEmployeeDataCount > 0 && $parentInLawExistInEmployeeDataCount > 0) {
                        $firstParent =  $employeeDataIntoDump->whereIn('relationship_with_employee', ['Father', 'Mother', 'Father-in-law', 'Mother-in-law'])->first();

                        if ($firstParent->relationship_with_employee == 'Father' || $firstParent->relationship_with_employee == 'Mother') {
                            foreach ($employeeDataIntoDump->whereIn('relationship_with_employee', ['Father-in-law', 'Mother-in-law']) as $parentInLaw) {
                                $message = ['Parent cross selection not allowed into this policy'];
                                $parentInLaw->has_errors = 1;
                                $parentInLaw->errors = json_encode($message);
                                $parentInLaw->update();
                            }
                        }
                        if ($firstParent->relationship_with_employee == 'Father-in-law' || $firstParent->relationship_with_employee == 'Mother-in-law') {
                            foreach ($employeeDataIntoDump->whereIn('relationship_with_employee', ['Father', 'Mother']) as $parent) {
                                $message = ['Parent cross selection not allowed into this policy'];
                                $parent->has_errors = 1;
                                $parent->errors = json_encode($message);
                                $parent->update();
                            }
                        }
                    }
                }

                //Multiple Spouse & children validation against self
                $policyAgeDetails = $policyForValidation->ageDetails;
                if ($policyAgeDetails->where('relation_id', RelationMaster::SPOUSE)->last()) {
                    $noOfSpouseAllowedInPolicy = is_null($policyAgeDetails->where('relation_id', RelationMaster::SPOUSE)->last()->no_of_relation) ? 1 : $policyAgeDetails->where('relation_id', RelationMaster::SPOUSE)->last()->no_of_relation;
                } else {
                    $noOfSpouseAllowedInPolicy = 0;
                }
                $spouseInSheet = $employeeDataIntoDump->where('relationship_with_employee', 'Spouse');
                $spouseCountInSheet = $spouseInSheet->count();

                if ($spouseCountInSheet > $noOfSpouseAllowedInPolicy) {
                    $count = 1;
                    foreach ($spouseInSheet as $spouse) {
                        if ($count > $noOfSpouseAllowedInPolicy) {
                            $message = ['Number of spouse allowed into the policy limit reached'];
                            $spouse->has_errors = 1;
                            $spouse->errors = json_encode($message);
                            $spouse->update();
                        }
                        $count++;
                    }
                }

                //No of Partner validation
                if ($policyAgeDetails->where('relation_id', RelationMaster::PARTNER)->last()) {
                    $noOfPartnerAllowedInPolicy = is_null($policyAgeDetails->where('relation_id', RelationMaster::PARTNER)->last()->no_of_relation) ? 1 : $policyAgeDetails->where('relation_id', RelationMaster::PARTNER)->last()->no_of_relation;
                } else {
                    $noOfPartnerAllowedInPolicy = 0;
                }
                $partnerInSheet = $employeeDataIntoDump->where('relationship_with_employee', 'Partner');
                $partnerCountInSheet = $partnerInSheet->count();

                if ($partnerCountInSheet > $noOfPartnerAllowedInPolicy) {
                    $count = 1;
                    foreach ($partnerInSheet as $partner) {
                        if ($count > $noOfPartnerAllowedInPolicy) {
                            $message = ['Number of partner allowed into the policy limit reached'];
                            $partner->has_errors = 1;
                            $partner->errors = json_encode($message);
                            $partner->update();
                        }
                        $count++;
                    }
                }

                $noOfChildrenAllowedInPolicy = $policyForValidation->max_child;
                $noOfTwinsChildAllowed = $policyForValidation->ageDetails->first()->max_twins;

                $childrenInSheet = $employeeDataIntoDump->whereIn('relationship_with_employee', ['Son', 'Daughter']);
                $childrenCountInSheet = $childrenInSheet->count();

                if ($noOfTwinsChildAllowed > 0) {

                    $uniqueChildrenCountInSheet = $childrenInSheet->unique('dob')->count();
                    $twinChildrenCountInSheet = $childrenCountInSheet - $uniqueChildrenCountInSheet;

                    if ($childrenCountInSheet > $noOfChildrenAllowedInPolicy) {
                        $childrenCountInSheet = $uniqueChildrenCountInSheet;
                    }
                }
                if ($childrenCountInSheet > $noOfChildrenAllowedInPolicy) {
                    $count = 1;
                    foreach ($childrenInSheet as $children) {
                        if ($count > $noOfChildrenAllowedInPolicy) {
                            $message = ['Number of children allowed into the policy limit reached.'];
                            $children->has_errors = 1;
                            $children->errors = json_encode($message);
                            $children->update();
                        }
                        $count++;
                    }
                }


                $noOfParentsAllowedInPolicy = $policyForValidation->max_parents;
                $parentsInSheet = $employeeDataIntoDump->whereIn('relationship_with_employee', ['Father', 'Mother', 'Father-in-law', 'Mother-in-law']);
                $parentsCountInSheet = $parentsInSheet->count();

                if ($parentsCountInSheet > $noOfParentsAllowedInPolicy) {
                    $count = 1;
                    foreach ($parentsInSheet as $parent) {
                        if ($count > $noOfParentsAllowedInPolicy) {
                            $message = ['Number of parents allowed into the policy limit reached.'];
                            $parent->has_errors = 1;
                            $parent->errors = json_encode($message);
                            $parent->update();
                        }
                        $count++;
                    }
                }

                $totalMemberInSheet = $employeeDataIntoDump;
                $memberAllowedInPolicy = $policyForValidation->no_of_member;
                if ($totalMemberInSheet->count() > $memberAllowedInPolicy) {
                    $count = 1;
                    foreach ($totalMemberInSheet as $member) {
                        if ($count > $memberAllowedInPolicy) {
                            $message = ['Max member allowed in policy limit reached'];
                            $member->has_errors = 1;
                            $member->errors = json_encode($message);
                            $member->update();
                        }
                        $count++;
                    }
                }



                $dependantInSheet = $employeeDataIntoDump->whereIn('relationship_with_employee', ['Son', 'Daughter', 'Father', 'Mother', 'Father-in-law', 'Mother-in-law', 'Partner', 'Spouse']);

                foreach ($dependantInSheet as $member) {
                    $sheetHasError = 0;
                    $sheetErrors = array();

                    if (validDate($data->employee_dob) && validDate($member->insured_member_dob)) {
                        $parsedEmployeeDob = Carbon::parse(validDate($data->employee_dob));
                        $parsedMemberDob = Carbon::parse(validDate($member->insured_member_dob));


                        $relationMaster = RelationMaster::where('name', $member->relationship_with_employee)->first();
                        $policyAgeDetail = PolicyAgeDetails::where('policy_id', $this->policyId)->where('relation_id', optional($relationMaster)->id)->first();
                        if ($policyAgeDetail) {
                            if (in_array($relationMaster?->id, RelationMaster::CHILDRENS) && $parsedMemberDob->lte($parsedEmployeeDob)) {
                                $sheetHasError = 1;
                                $message = 'Child age must be less than employee age.';
                                array_push($sheetErrors, $message);
                            } elseif ((in_array($relationMaster?->id, RelationMaster::PARENTS_AND_PARENTS_IN_LAW)) && $parsedMemberDob->gte($parsedEmployeeDob)) {
                                $message = 'Parent age must be greater than employeee age.';
                                $sheetHasError = 1;
                                array_push($sheetErrors, $message);
                            } else {
                                if (!is_null($policyAgeDetail->age_difference)) {

                                    if ($policyAgeDetail->difference_from_relation == RelationMaster::SELF) {

                                        if ($parsedMemberDob->diffInYears($parsedEmployeeDob) < $policyAgeDetail->age_difference) {
                                            $sheetHasError = 1;
                                            $message = 'employee and ' . $member->relationship_with_employee . ' age difference must be ' . $policyAgeDetail->age_difference . ' years.';
                                            array_push($sheetErrors, $message);
                                        }
                                    } elseif ($policyAgeDetail->difference_from_relation == RelationMaster::SPOUSE) {
                                        $spouseExists = $employeeDataIntoDump->whereIn('relationship_with_employee', ['Spouse'])->first();
                                        if ($spouseExists) {
                                            if (validDate($spouseExists->insured_member_dob)) {
                                                $parsedSpouseDob = Carbon::parse(validDate($spouseExists->insured_member_dob));
                                                if ($parsedMemberDob->diffInYears($parsedSpouseDob) < $policyAgeDetail->age_difference) {
                                                    $message = 'spouse and ' . $member->relationship_with_employee . ' age difference must be ' . $policyAgeDetail->age_difference . ' years.';
                                                    $sheetHasError = 1;
                                                    array_push($sheetErrors, $message);
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if ($parsedMemberDob->diffInYears($parsedEmployeeDob) < $policyAgeDetail->age_difference) {
                                        $message = 'employee and ' . $member->relationship_with_employee . ' age difference must be 18 years.';
                                        $sheetHasError = 1;
                                        array_push($sheetErrors, $message);
                                    }
                                }

                                $today = today();
                                if (in_array($relationMaster?->id, RelationMaster::ADULTS) && is_null($policyAgeDetail->min_age) && is_null($policyAgeDetail->max_age)) {
                                    if ($parsedMemberDob->diffInYears($today) < 18) {
                                        $sheetHasError = 1;
                                        array_push($sheetErrors, $messages['age_must_be_18_years']);
                                    }
                                }
                            }


                            //Parent and Parents in law validation based on employee Age
                            $employeeGender = $data->employee_gender;

                            if ($policyAgeDetail && !is_null($employeeGender)) {

                                if ($policyAgeDetail->is_allowed_for_gender === 0 && $employeeGender == 'Female') {
                                    $message = $member->relationship_with_employee . ' is not allowed for ' . $employeeGender . ' employee.';
                                    $sheetHasError = 1;
                                    array_push($sheetErrors, $message);
                                } elseif ($policyAgeDetail->is_allowed_for_gender == 1 && $employeeGender == 'Male') {
                                    $message = $member->relationship_with_employee . ' is not allowed for ' . $employeeGender . ' employee.';
                                    $sheetHasError = 1;
                                    array_push($sheetErrors, $message);
                                }
                            }
                        }
                    }

                    if ($sheetHasError == 1) {
                        $member->has_errors = $sheetHasError;
                        $member->errors = json_encode(array_values($sheetErrors));
                        $member->update();
                    }
                }
            } else {
                $selfPresentInSheet = EndrosementDataDump::where('employee_code', $data->employee_code)
                    ->where('type_id', 1)
                    ->where('excel_report_id', $this->excelReportId)
                    ->where('policy_id', $policyForValidation->id)
                    ->where('relationship_with_employee', 'Self')->first();
                // took the below validation outside because it won't validate for parent count
                // in cases where the sheet has the data of both employee and parents
                if (!$selfPresentInSheet) {
                    $currentMember = $data;
                    $currentMemberIsNotFirstMember = EndrosementDataDump::where('employee_code', $data?->employee_code)
                        ->where('type_id', 1)
                        ->where('excel_report_id', $this->excelReportId)
                        ->where('policy_id', $policyForValidation->id)
                        ->where('id', '<', $currentMember->id)
                        ->first();
                    //only first member will satisfy below condition
                    if (!$currentMemberIsNotFirstMember) {

                        //Parent Cross Selection Validation in sheet (if Self is not present in sheet)
                        $parentsInSheet = EndrosementDataDump::where('employee_code', $data?->employee_code)
                            ->where('type_id', 1)
                            ->where('excel_report_id', $this->excelReportId)
                            ->where('policy_id', $policyForValidation->id)
                            ->whereIn('relationship_with_employee',  ['Father', 'Mother', 'Father-in-law', 'Mother-in-law'])
                            ->get();
                        if ($policyForValidation->has_parent_cross_selection == 0) {


                            $firstParent = $parentsInSheet->first();
                            foreach ($parentsInSheet as $parent) {
                                if ((in_array($firstParent->relationship_with_employee, ['Father', 'Mother']) && in_array($parent->relationship_with_employee, ['Father-in-law', 'Mother-in-law']))
                                    || (in_array($firstParent->relationship_with_employee, ['Father-in-law', 'Mother-in-law']) && in_array($parent->relationship_with_employee, ['Father', 'Mother']))
                                ) {
                                    $message = ['Parent cross selection not allowed into this policy'];
                                    $parent->has_errors = 1;
                                    $parent->errors = json_encode($message);
                                    $parent->update();
                                }
                            }
                        }

                        //No of Parent validation (if self is not present in sheet)
                        $noOfParentsAllowedInPolicy = $policyForValidation->max_parents;
                        $parentsCountInSheet = $parentsInSheet->count();

                        if ($parentsCountInSheet > $noOfParentsAllowedInPolicy) {
                            $count = 1;
                            foreach ($parentsInSheet as $parent) {
                                if ($count > $noOfParentsAllowedInPolicy) {
                                    $message = ['Number of parents allowed into the policy limit reached.'];
                                    $parent->has_errors = 1;
                                    $parent->errors = json_encode($message);
                                    $parent->update();
                                }
                                if (is_null($parent->has_errors)) {
                                    $count++;
                                }
                            }
                        }
                    }
                } else {
                    if ($relationId == RelationMaster::SPOUSE) {
                        $selfDateOfMarriage = validDate($selfPresentInSheet->date_of_marriage);
                        $spouseDateOfMarriage = validDate($data->date_of_marriage);
                        if ($selfDateOfMarriage && $spouseDateOfMarriage) {
                            if (Carbon::parse($selfDateOfMarriage) != Carbon::parse($spouseDateOfMarriage)) {
                                $message = [$messages['dom_should_same_as_employee']];
                                $data->has_errors = 1;
                                $data->errors = json_encode($message);
                                $data->update();
                            }
                        }
                    }
                }
            }


            $data->is_validated = 1;
            $data->update();
            if ($hasErrors == 1) {
                $data->has_errors = $hasErrors;
                $data->errors = json_encode(array_values($errors));
                $data->update();
            }
        } catch (Exception $e) {
            $errors = [
                'failed_to_process' => 'Failed to validate data',
            ];
            $data->has_errors = 1;
            $data->errors = json_encode(array_values($errors));
            $data->update();

            $jobStatus = ['status' => false, 'message' => 'Oops! Expected Error Occur.', 'log_message' => $e->getMessage(), 'error_trace' => $e->getTrace()];
            // Log::notice("Error in validation function", $jobStatus);
            Log::info('validation error', [$e->getTraceAsString()]);
        }
    }


    function createExcelErrorReport()
    {
        try {

            ini_set('memory_limit', '-1');
            ini_set('max_execution_time', 0);
            set_time_limit(0);

            $excelReportId = $this->excelReportId;
            $typeId = $this->typeId;


            $fileToBeName = time() . $excelReportId . '_memberError.xlsx';
            if ($typeId == 1) {
                $fileToBeName = time() . $excelReportId . '_AddMemberError.xlsx';
                $successMessage = 'Member added successfully.';
                $failureMessage = 'Failed to add.';
            } elseif ($typeId == 2) {
                $fileToBeName = time() . $excelReportId . '_RemoveMemberError.xlsx';
                $successMessage = 'Member Deleted Successfully.';
                $failureMessage = 'Failed to Delete.';
            } elseif ($typeId == 3) {
                $fileToBeName = time() . $excelReportId . '_UpdateMemberError.xlsx';
                $successMessage = 'Member Corrected Successfully.';
                $failureMessage = 'Failed to Correct.';
            }

            $policyId = $this->policyId;


            $policyHasCustomFormat = CustomFormatController::checkCustomPolicyFormat($policyId, $typeId);

            $columnLabels = $columnFields = [];

            $sheetSuccessStatus = ExcelErrorReports::SUCCESS;
            $sheetFailedStatus  = ExcelErrorReports::FAILED;

            if ($policyHasCustomFormat) {
                $customTemplateFeilds = $policyHasCustomFormat->templateFields;

                $columnLabels = $customTemplateFeilds->pluck('label')->toArray();

                $fields = $customTemplateFeilds->pluck('defaultField.feild_name')->toArray();
            } else {
                $defaultFields = DefaultEndrosementFormatFeildsMapping::where('default_endrosement_format_id', $typeId)->where('status', 1)->orderBy('sequence')->get();

                $columnLabels = $defaultFields->pluck('default_feild_name')->toArray();

                $fields = $defaultFields->pluck('feild_name')->toArray();
            }

            $extraFields = [
                'is_validated',
                'is_processed',
                'has_errors',
                'errors',
                'dont_process',
            ];

            $columnFields = array_merge($fields, $extraFields);

            $allRecords = EndrosementDataDump::where('excel_report_id', $excelReportId)->select($columnFields)->get();
            $allRecordCount = $allRecords->count();
            $recordFailedToUpload = $allRecords->where('is_processed', 0)->count();

            if ($recordFailedToUpload > 0) {
                $finalStatus = $sheetFailedStatus;

                foreach ($allRecords as $index => $record) {
                    if ($record['is_processed'] == 1) {
                        $record['status'] = $successMessage;
                        $record['reason'] = '';
                    } elseif (@$record['dont_process']) {
                        $record['reason'] = 'Insuffiecient CD Balance';
                    } else {
                        $record['status'] = $failureMessage;
                        if (@$record['errors']) {
                            $record['reason'] = implode(',', json_decode($record['errors']));
                        }
                    }

                    if (isset($record['has_death_certificate'])) {
                        $record['has_death_certificate'] = $record['has_death_certificate'] == 1 ? 'Yes' : 'No';
                    }

                    unset($record['has_errors']);
                    unset($record['errors']);
                    unset($record['is_validated']);
                    unset($record['is_processed']);
                    unset($record['dont_process']);
                }



                array_push($columnLabels, 'Status');
                array_push($columnLabels, 'Reason');

                $filePath = 'Endrosement/Errors/' . $fileToBeName;

                Excel::store(new MemberEndrosementAddMemberErrorExport($allRecords, $columnLabels), $filePath);

                $excelErrorReportUrl = Storage::url($filePath);
            } else {
                $finalStatus = $sheetSuccessStatus;
            }


            $currentExcelErrorReport = ExcelErrorReports::whereId($excelReportId)->first();
            $currentExcelErrorReport->error_document_url = isset($excelErrorReportUrl) ? $excelErrorReportUrl : NULL;
            $currentExcelErrorReport->status = $finalStatus;
            $currentExcelErrorReport->no_of_employees_uploaded = $allRecordCount - $recordFailedToUpload;
            $currentExcelErrorReport->no_of_employees_failed_to_upload = $recordFailedToUpload;
            $currentExcelErrorReport->to_process = 1;
            $currentExcelErrorReport->update();

            if ($currentExcelErrorReport->no_of_employees_uploaded >= 1) {
                if (!is_null($currentExcelErrorReport->endorsement_request_id)) {
                    $dataDumpRequest = array_unique(EndrosementRequestFiles::where('endrose_request_id', $currentExcelErrorReport->endorsement_request_id)->where('is_final_file', 1)->pluck('type')->toArray());
                    $countEndrosementTypeRequest = count($dataDumpRequest);
                    if ($countEndrosementTypeRequest == 1) {
                        DataDumpUploads::whereId($currentExcelErrorReport->endorsement_request_id)->update(['status' => DataDumpStatus::PROCESSED]);
                    } elseif ($countEndrosementTypeRequest > 1) {
                        $successErrorExcelCount = ExcelErrorReports::where('endorsement_request_id', $currentExcelErrorReport->endorsement_request_id)
                            ->where('no_of_employees_uploaded', '>=', 1)->count();
                        if ($successErrorExcelCount  >= $countEndrosementTypeRequest) {
                            DataDumpUploads::whereId($currentExcelErrorReport->endorsement_request_id)->update(['status' => DataDumpStatus::PROCESSED]);
                        } else {
                            DataDumpUploads::whereId($currentExcelErrorReport->endorsement_request_id)->update(['status' => DataDumpStatus::PARTIAL_PROCESSED]);
                        }
                    }
                }
            }


            $endorsementDataUploadAction = 'Endorsement data upload';

            $policy = MasterPolicy::where('id', $this->policyId)->first();

            $brokerId = $policy->broker_id;

            $endorsementDataUploadNotification = Notification::with([
                'actionType' => function ($action) use ($endorsementDataUploadAction) {
                    return $action->where('action_name', $endorsementDataUploadAction);
                }
            ])->where('notification_type_id', 1)->where('broker_id', $brokerId)->get()->last();

            if (!is_null($endorsementDataUploadNotification)) {
                $policyId = $policy->id;
                $dynamicContent = 'Member Endorsement Data Uploaded';
                createActionableNotification($policyId, $endorsementDataUploadAction, $dynamicContent, $brokerId);
            }

            $appName = env('APP_NAME', 'Employee-Benefits');

            /** Campaign Mailer */
            // if (Portal::check(Portal::EMPLOYEE_BENEFIT) || Portal::check(Portal::ALLIANCE_UAT)) {
            //     $employerCampaignTrigger = EmployerCampaignEmailerTriggerMapping::where('employer_id', $policy->employer_id)->where('campaign_emailer_id', CampaignEmailer::LAUNCH_EMAILER)->first();
            //     if ($employerCampaignTrigger) {
            //         if ($employerCampaignTrigger->to_trigger == 1) {

            //             $dataDumpToEmail = EndrosementDataDump::where('excel_report_id', $excelReportId)
            //                 ->where('has_errors', 0)->where('is_validated', 1)->where('is_processed', 1)->where('is_processed_for_campaign_email', 0)
            //                 ->where('relationship_with_employee', 'Self')->limit(500)->get();

            //             if ($dataDumpToEmail->isNotEmpty()) {
            //                 LaunchEmailerJob::dispatch($excelReportId)->onQueue('endrosement');;
            //             }
            //         }
            //     }
            // }

            /** End Campaign Mailer */

            // Endorsement - Welcome Employee Email/Employee Onboard Mail
            $policyToSystemTrigger = PolicySystemTriggerMapping::where('policy_id', $policy->id)->whereIn(
                'master_system_trigger_id',
                [
                    // MasterSystemTrigger::MASTER_SYSTEM_TRIGGER_ENDORSEMENT_WELCOME_MAIL,
                    MasterSystemTrigger::MASTER_SYSTEM_TRIGGER_EMPLOYEE_ONBOARD_MAIL
                ]
            )->first();
            $appName = env('APP_NAME', 'Employee-Benefits');
            // if ($appName == 'UAT-UIB' || $appName == 'UIB-PROD' || $appName == 'UIB-UAT' || $appName == 'Employee-Benefits') {
            // Log::info("Policy System Trigger", [$policyToSystemTrigger]); // sms and email in one job
            if (optional($policyToSystemTrigger)->to_trigger == 1 || $policyToSystemTrigger?->to_sms_trigger == 1) {
                // if ($appName == 'Employee-Benefits' || $appName == 'HeroCare' || $appName == 'UATHeroCare' || $appName == 'Howden-EB'  || $appName == 'Howden-UAT') {
                $dataDumpToEmail = EndrosementDataDump::where('excel_report_id', $excelReportId)
                    ->where('has_errors', 0)->where('is_validated', 1)->where('is_processed', 1)->where('is_processed_for_email', 0)
                    ->where('relationship_with_employee', 'Self')->limit(500)->get();
                if ($dataDumpToEmail->isNotEmpty()) {

                    EndrosementMailJob::dispatch($this->policyId, $excelReportId, $policyToSystemTrigger, $this->cronLog)->onQueue('endrosement');
                } else {
                    EndrosementDataDump::where('excel_report_id', $excelReportId)->delete();
                }
            } else {

                $policyToSystemTrigger = PolicySystemTriggerMapping::where('policy_id', $policy->id)->whereIn(
                    'master_system_trigger_id',
                    [
                        // MasterSystemTrigger::MASTER_SYSTEM_TRIGGER_ENDORSEMENT_WELCOME_MAIL,
                        MasterSystemTrigger::MASTER_SYSTEM_TRIGGER_EMPLOYEE_ONBOARD_MAIL
                    ]
                )->where('to_trigger', 0)
                    ->first();
                $dataDumpToEmail = EndrosementDataDump::where('excel_report_id', $excelReportId)
                    ->where('has_errors', 0)->where('is_validated', 1)->where('is_processed', 1)->where('is_processed_for_email', 0)
                    ->where('relationship_with_employee', 'Self')->limit(500)->get();
                if ($dataDumpToEmail->isNotEmpty()) {
                    EmailDashboardJob::dispatch('EmployeeOnboardMail', $policyToSystemTrigger, $this->policyId, $excelReportId, MasterSystemTrigger::MASTER_SYSTEM_TRIGGER_EMPLOYEE_ONBOARD_MAIL)->onQueue('endrosement');
                }
            }
            // }

            /** FOR wHATSAPP  */
            if (optional($policyToSystemTrigger)->to_whatsapp_trigger == 1) {
                $dataDumpToWhatsapp = EndrosementDataDump::where('excel_report_id', $excelReportId)
                    ->where('has_errors', 0)->where('is_validated', 1)->where('is_processed', 1)->where('is_processed_for_whatsapp', 0)
                    ->where('relationship_with_employee', 'Self')->limit(500)->get();

                if ($dataDumpToWhatsapp->isNotEmpty()) {
                    EndrosementWhatssappJob::dispatch($this->policyId, $excelReportId)->onQueue('endrosement');
                }
            }

            // For Sms
            // if ($appName == 'EBUAT-ACE' || $appName == 'EB-ACE' || $appName == 'UATEB-360' || $appName == 'PRODEB-360') {
            if (optional($policyToSystemTrigger)->to_sms_trigger == 1) {
                $dataDumpToSms = EndrosementDataDump::where('excel_report_id', $excelReportId)
                    ->where('has_errors', 0)->where('is_validated', 1)->where('is_processed', 1)->where('is_processed_for_sms', 0)
                    ->where('relationship_with_employee', 'Self')->limit(500)->get();

                if ($dataDumpToSms->isNotEmpty()) {
                    EndrosementSmsJob::dispatch($this->policyId, $excelReportId)->onQueue('endrosement');
                }
            }
            // }
        } catch (Exception $e) {
            $jobStatus = ['status' => false, 'message' => 'Oops! Expected Error Occur.', 'log_message' => $e->getMessage(), 'error_trace' => $e->getTrace()];
            Log::notice("Failed to do endrosement", $jobStatus);
        }

        if (!is_null($this->cronLog)) {
            $cronEndTime = Carbon::parse(now());
            $this->cronLog->cron_end_time = $cronEndTime;
        }
    }
}
